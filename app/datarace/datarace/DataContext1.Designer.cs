//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 11/07/2022 10:44:53
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System;
using System.ComponentModel;

namespace DataraceContext
{

    [DatabaseAttribute(Name = "datarace")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class DataraceDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DataraceDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertAffiliazioni(Affiliazioni instance);
        partial void UpdateAffiliazioni(Affiliazioni instance);
        partial void DeleteAffiliazioni(Affiliazioni instance);
        partial void InsertCampionati(Campionati instance);
        partial void UpdateCampionati(Campionati instance);
        partial void DeleteCampionati(Campionati instance);
        partial void InsertCircuiti(Circuiti instance);
        partial void UpdateCircuiti(Circuiti instance);
        partial void DeleteCircuiti(Circuiti instance);
        partial void InsertClassi(Classi instance);
        partial void UpdateClassi(Classi instance);
        partial void DeleteClassi(Classi instance);
        partial void InsertCostruttori(Costruttori instance);
        partial void UpdateCostruttori(Costruttori instance);
        partial void DeleteCostruttori(Costruttori instance);
        partial void InsertGare(Gare instance);
        partial void UpdateGare(Gare instance);
        partial void DeleteGare(Gare instance);
        partial void InsertGranPremi(GranPremi instance);
        partial void UpdateGranPremi(GranPremi instance);
        partial void DeleteGranPremi(GranPremi instance);
        partial void InsertIscrizioni(Iscrizioni instance);
        partial void UpdateIscrizioni(Iscrizioni instance);
        partial void DeleteIscrizioni(Iscrizioni instance);
        partial void InsertModelli(Modelli instance);
        partial void UpdateModelli(Modelli instance);
        partial void DeleteModelli(Modelli instance);
        partial void InsertPartecipazioniCostruttore(PartecipazioniCostruttore instance);
        partial void UpdatePartecipazioniCostruttore(PartecipazioniCostruttore instance);
        partial void DeletePartecipazioniCostruttore(PartecipazioniCostruttore instance);
        partial void InsertPartecipazioniPilota(PartecipazioniPilota instance);
        partial void UpdatePartecipazioniPilota(PartecipazioniPilota instance);
        partial void DeletePartecipazioniPilota(PartecipazioniPilota instance);
        partial void InsertPartecipazioniTeam(PartecipazioniTeam instance);
        partial void UpdatePartecipazioniTeam(PartecipazioniTeam instance);
        partial void DeletePartecipazioniTeam(PartecipazioniTeam instance);
        partial void InsertPiloti(Piloti instance);
        partial void UpdatePiloti(Piloti instance);
        partial void DeletePiloti(Piloti instance);
        partial void InsertProve(Prove instance);
        partial void UpdateProve(Prove instance);
        partial void DeleteProve(Prove instance);
        partial void InsertPunteggi(Punteggi instance);
        partial void UpdatePunteggi(Punteggi instance);
        partial void DeletePunteggi(Punteggi instance);
        partial void InsertRisultati(Risultati instance);
        partial void UpdateRisultati(Risultati instance);
        partial void DeleteRisultati(Risultati instance);
        partial void InsertStagioni(Stagioni instance);
        partial void UpdateStagioni(Stagioni instance);
        partial void DeleteStagioni(Stagioni instance);
        partial void InsertStagioniTeam(StagioniTeam instance);
        partial void UpdateStagioniTeam(StagioniTeam instance);
        partial void DeleteStagioniTeam(StagioniTeam instance);
        partial void InsertStatistichePiloti(StatistichePiloti instance);
        partial void UpdateStatistichePiloti(StatistichePiloti instance);
        partial void DeleteStatistichePiloti(StatistichePiloti instance);
        partial void InsertTeam(Team instance);
        partial void UpdateTeam(Team instance);
        partial void DeleteTeam(Team instance);

        #endregion

        public DataraceDataContext() :
        base(GetConnectionString("DataraceDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public DataraceDataContext(MappingSource mappingSource) :
        base(GetConnectionString("DataraceDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DataraceDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataraceDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataraceDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataraceDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Affiliazioni> Affiliazioni
        {
            get
            {
                return this.GetTable<Affiliazioni>();
            }
        }

        public Devart.Data.Linq.Table<Campionati> Campionati
        {
            get
            {
                return this.GetTable<Campionati>();
            }
        }

        public Devart.Data.Linq.Table<Circuiti> Circuiti
        {
            get
            {
                return this.GetTable<Circuiti>();
            }
        }

        public Devart.Data.Linq.Table<Classi> Classi
        {
            get
            {
                return this.GetTable<Classi>();
            }
        }

        public Devart.Data.Linq.Table<Costruttori> Costruttori
        {
            get
            {
                return this.GetTable<Costruttori>();
            }
        }

        public Devart.Data.Linq.Table<Gare> Gare
        {
            get
            {
                return this.GetTable<Gare>();
            }
        }

        public Devart.Data.Linq.Table<GranPremi> GranPremi
        {
            get
            {
                return this.GetTable<GranPremi>();
            }
        }

        public Devart.Data.Linq.Table<Iscrizioni> Iscrizioni
        {
            get
            {
                return this.GetTable<Iscrizioni>();
            }
        }

        public Devart.Data.Linq.Table<Modelli> Modelli
        {
            get
            {
                return this.GetTable<Modelli>();
            }
        }

        public Devart.Data.Linq.Table<PartecipazioniCostruttore> PartecipazioniCostruttore
        {
            get
            {
                return this.GetTable<PartecipazioniCostruttore>();
            }
        }

        public Devart.Data.Linq.Table<PartecipazioniPilota> PartecipazioniPilota
        {
            get
            {
                return this.GetTable<PartecipazioniPilota>();
            }
        }

        public Devart.Data.Linq.Table<PartecipazioniTeam> PartecipazioniTeam
        {
            get
            {
                return this.GetTable<PartecipazioniTeam>();
            }
        }

        public Devart.Data.Linq.Table<Piloti> Piloti
        {
            get
            {
                return this.GetTable<Piloti>();
            }
        }

        public Devart.Data.Linq.Table<Prove> Prove
        {
            get
            {
                return this.GetTable<Prove>();
            }
        }

        public Devart.Data.Linq.Table<Punteggi> Punteggi
        {
            get
            {
                return this.GetTable<Punteggi>();
            }
        }

        public Devart.Data.Linq.Table<Risultati> Risultati
        {
            get
            {
                return this.GetTable<Risultati>();
            }
        }

        public Devart.Data.Linq.Table<Stagioni> Stagioni
        {
            get
            {
                return this.GetTable<Stagioni>();
            }
        }

        public Devart.Data.Linq.Table<StagioniTeam> StagioniTeam
        {
            get
            {
                return this.GetTable<StagioniTeam>();
            }
        }

        public Devart.Data.Linq.Table<StatistichePiloti> StatistichePiloti
        {
            get
            {
                return this.GetTable<StatistichePiloti>();
            }
        }

        public Devart.Data.Linq.Table<Team> Teams
        {
            get
            {
                return this.GetTable<Team>();
            }
        }

        public Devart.Data.Linq.Table<EdizionePiuRecente> EdizionePiuRecente
        {
            get
            {
                return this.GetTable<EdizionePiuRecente>();
            }
        }

        public Devart.Data.Linq.Table<RisultatiCircuito> RisultatiCircuito
        {
            get
            {
                return this.GetTable<RisultatiCircuito>();
            }
        }

        public Devart.Data.Linq.Table<StagioneCorrente> StagioneCorrente
        {
            get
            {
                return this.GetTable<StagioneCorrente>();
            }
        }
    }
}

namespace DataraceContext
{

    /// <summary>
    /// There are no comments for DataraceContext.Affiliazioni in the schema.
    /// </summary>
    [Table(Name = @"datarace.affiliazioni")]
    public partial class Affiliazioni : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Team;

        private int _Anno;

        private string _Costruttore;
        #pragma warning restore 0649

        private EntityRef<Costruttori> _Costruttori;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTeamChanging(string value);
        partial void OnTeamChanged();
        partial void OnAnnoChanging(int value);
        partial void OnAnnoChanged();
        partial void OnCostruttoreChanging(string value);
        partial void OnCostruttoreChanged();
        #endregion

        public Affiliazioni()
        {
            this._Costruttori  = default(EntityRef<Costruttori>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Team in the schema.
        /// </summary>
        [Column(Name = @"team", Storage = "_Team", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string Team
        {
            get
            {
                return this._Team;
            }
            set
            {
                if (this._Team != value)
                {
                    this.OnTeamChanging(value);
                    this.SendPropertyChanging("Team");
                    this._Team = value;
                    this.SendPropertyChanged("Team");
                    this.OnTeamChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Anno in the schema.
        /// </summary>
        [Column(Name = @"anno", Storage = "_Anno", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int Anno
        {
            get
            {
                return this._Anno;
            }
            set
            {
                if (this._Anno != value)
                {
                    this.OnAnnoChanging(value);
                    this.SendPropertyChanging("Anno");
                    this._Anno = value;
                    this.SendPropertyChanged("Anno");
                    this.OnAnnoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Costruttore in the schema.
        /// </summary>
        [Column(Name = @"costruttore", Storage = "_Costruttore", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string Costruttore
        {
            get
            {
                return this._Costruttore;
            }
            set
            {
                if (this._Costruttore != value)
                {
                    if (this._Costruttori.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCostruttoreChanging(value);
                    this.SendPropertyChanging("Costruttore");
                    this._Costruttore = value;
                    this.SendPropertyChanged("Costruttore");
                    this.OnCostruttoreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Costruttori in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Costruttori_Affiliazioni", Storage="_Costruttori", ThisKey="Costruttore", OtherKey="IdCostruttore", IsForeignKey=true)]
        public Costruttori Costruttori
        {
            get
            {
                return this._Costruttori.Entity;
            }
            set
            {
                Costruttori previousValue = this._Costruttori.Entity;
                if ((previousValue != value) || (this._Costruttori.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Costruttori");
                    if (previousValue != null)
                    {
                        this._Costruttori.Entity = null;
                        previousValue.Affiliazioni.Remove(this);
                    }
                    this._Costruttori.Entity = value;
                    if (value != null)
                    {
                        this._Costruttore = value.IdCostruttore;
                        value.Affiliazioni.Add(this);
                    }
                    else
                    {
                        this._Costruttore = default(string);
                    }
                    this.SendPropertyChanged("Costruttori");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.Campionati in the schema.
    /// </summary>
    [Table(Name = @"datarace.campionati")]
    public partial class Campionati : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Classe;

        private int _Anno;

        private int _NumeroProve;

        private string _Punteggio;
        #pragma warning restore 0649

        private EntityRef<Stagioni> _Stagioni;

        private EntityRef<Classi> _Classi;

        private EntityRef<Punteggi> _Punteggi;

        private EntitySet<PartecipazioniCostruttore> _PartecipazioniCostruttore;

        private EntitySet<PartecipazioniPilota> _PartecipazioniPilota;

        private EntitySet<PartecipazioniTeam> _PartecipazioniTeam;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnClasseChanging(string value);
        partial void OnClasseChanged();
        partial void OnAnnoChanging(int value);
        partial void OnAnnoChanged();
        partial void OnNumeroProveChanging(int value);
        partial void OnNumeroProveChanged();
        partial void OnPunteggioChanging(string value);
        partial void OnPunteggioChanged();
        #endregion

        public Campionati()
        {
            this._Stagioni  = default(EntityRef<Stagioni>);
            this._Classi  = default(EntityRef<Classi>);
            this._Punteggi  = default(EntityRef<Punteggi>);
            this._PartecipazioniCostruttore = new EntitySet<PartecipazioniCostruttore>(new Action<PartecipazioniCostruttore>(this.attach_PartecipazioniCostruttore), new Action<PartecipazioniCostruttore>(this.detach_PartecipazioniCostruttore));
            this._PartecipazioniPilota = new EntitySet<PartecipazioniPilota>(new Action<PartecipazioniPilota>(this.attach_PartecipazioniPilota), new Action<PartecipazioniPilota>(this.detach_PartecipazioniPilota));
            this._PartecipazioniTeam = new EntitySet<PartecipazioniTeam>(new Action<PartecipazioniTeam>(this.attach_PartecipazioniTeam), new Action<PartecipazioniTeam>(this.detach_PartecipazioniTeam));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Classe in the schema.
        /// </summary>
        [Column(Name = @"classe", Storage = "_Classe", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string Classe
        {
            get
            {
                return this._Classe;
            }
            set
            {
                if (this._Classe != value)
                {
                    if (this._Classi.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnClasseChanging(value);
                    this.SendPropertyChanging("Classe");
                    this._Classe = value;
                    this.SendPropertyChanged("Classe");
                    this.OnClasseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Anno in the schema.
        /// </summary>
        [Column(Name = @"anno", Storage = "_Anno", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int Anno
        {
            get
            {
                return this._Anno;
            }
            set
            {
                if (this._Anno != value)
                {
                    if (this._Stagioni.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnnoChanging(value);
                    this.SendPropertyChanging("Anno");
                    this._Anno = value;
                    this.SendPropertyChanged("Anno");
                    this.OnAnnoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumeroProve in the schema.
        /// </summary>
        [Column(Name = @"numeroProve", Storage = "_NumeroProve", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int NumeroProve
        {
            get
            {
                return this._NumeroProve;
            }
            set
            {
                if (this._NumeroProve != value)
                {
                    this.OnNumeroProveChanging(value);
                    this.SendPropertyChanging("NumeroProve");
                    this._NumeroProve = value;
                    this.SendPropertyChanged("NumeroProve");
                    this.OnNumeroProveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Punteggio in the schema.
        /// </summary>
        [Column(Name = @"punteggio", Storage = "_Punteggio", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Punteggio
        {
            get
            {
                return this._Punteggio;
            }
            set
            {
                if (this._Punteggio != value)
                {
                    if (this._Punteggi.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPunteggioChanging(value);
                    this.SendPropertyChanging("Punteggio");
                    this._Punteggio = value;
                    this.SendPropertyChanged("Punteggio");
                    this.OnPunteggioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Stagioni in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stagioni_Campionati", Storage="_Stagioni", ThisKey="Anno", OtherKey="Anno", IsForeignKey=true)]
        public Stagioni Stagioni
        {
            get
            {
                return this._Stagioni.Entity;
            }
            set
            {
                Stagioni previousValue = this._Stagioni.Entity;
                if ((previousValue != value) || (this._Stagioni.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Stagioni");
                    if (previousValue != null)
                    {
                        this._Stagioni.Entity = null;
                        previousValue.Campionati.Remove(this);
                    }
                    this._Stagioni.Entity = value;
                    if (value != null)
                    {
                        this._Anno = value.Anno;
                        value.Campionati.Add(this);
                    }
                    else
                    {
                        this._Anno = default(int);
                    }
                    this.SendPropertyChanged("Stagioni");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Classi in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Classi_Campionati", Storage="_Classi", ThisKey="Classe", OtherKey="Nome", IsForeignKey=true)]
        public Classi Classi
        {
            get
            {
                return this._Classi.Entity;
            }
            set
            {
                Classi previousValue = this._Classi.Entity;
                if ((previousValue != value) || (this._Classi.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Classi");
                    if (previousValue != null)
                    {
                        this._Classi.Entity = null;
                        previousValue.Campionati.Remove(this);
                    }
                    this._Classi.Entity = value;
                    if (value != null)
                    {
                        this._Classe = value.Nome;
                        value.Campionati.Add(this);
                    }
                    else
                    {
                        this._Classe = default(string);
                    }
                    this.SendPropertyChanged("Classi");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Punteggi in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Punteggi_Campionati", Storage="_Punteggi", ThisKey="Punteggio", OtherKey="IdPunteggio", IsForeignKey=true)]
        public Punteggi Punteggi
        {
            get
            {
                return this._Punteggi.Entity;
            }
            set
            {
                Punteggi previousValue = this._Punteggi.Entity;
                if ((previousValue != value) || (this._Punteggi.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Punteggi");
                    if (previousValue != null)
                    {
                        this._Punteggi.Entity = null;
                        previousValue.Campionati.Remove(this);
                    }
                    this._Punteggi.Entity = value;
                    if (value != null)
                    {
                        this._Punteggio = value.IdPunteggio;
                        value.Campionati.Add(this);
                    }
                    else
                    {
                        this._Punteggio = default(string);
                    }
                    this.SendPropertyChanged("Punteggi");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PartecipazioniCostruttore in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Campionati_PartecipazioniCostruttore", Storage="_PartecipazioniCostruttore", ThisKey="Classe,Anno", OtherKey="Classe,Anno", DeleteRule="NO ACTION")]
        public EntitySet<PartecipazioniCostruttore> PartecipazioniCostruttore
        {
            get
            {
                return this._PartecipazioniCostruttore;
            }
            set
            {
                this._PartecipazioniCostruttore.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PartecipazioniPilota in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Campionati_PartecipazioniPilota", Storage="_PartecipazioniPilota", ThisKey="Classe,Anno", OtherKey="Classe,Anno", DeleteRule="NO ACTION")]
        public EntitySet<PartecipazioniPilota> PartecipazioniPilota
        {
            get
            {
                return this._PartecipazioniPilota;
            }
            set
            {
                this._PartecipazioniPilota.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PartecipazioniTeam in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Campionati_PartecipazioniTeam", Storage="_PartecipazioniTeam", ThisKey="Classe,Anno", OtherKey="Classe,Anno", DeleteRule="NO ACTION")]
        public EntitySet<PartecipazioniTeam> PartecipazioniTeam
        {
            get
            {
                return this._PartecipazioniTeam;
            }
            set
            {
                this._PartecipazioniTeam.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_PartecipazioniCostruttore(PartecipazioniCostruttore entity)
        {
            this.SendPropertyChanging("PartecipazioniCostruttore");
            entity.Campionati = this;
        }
    
        private void detach_PartecipazioniCostruttore(PartecipazioniCostruttore entity)
        {
            this.SendPropertyChanging("PartecipazioniCostruttore");
            entity.Campionati = null;
        }

        private void attach_PartecipazioniPilota(PartecipazioniPilota entity)
        {
            this.SendPropertyChanging("PartecipazioniPilota");
            entity.Campionati = this;
        }
    
        private void detach_PartecipazioniPilota(PartecipazioniPilota entity)
        {
            this.SendPropertyChanging("PartecipazioniPilota");
            entity.Campionati = null;
        }

        private void attach_PartecipazioniTeam(PartecipazioniTeam entity)
        {
            this.SendPropertyChanging("PartecipazioniTeam");
            entity.Campionati = this;
        }
    
        private void detach_PartecipazioniTeam(PartecipazioniTeam entity)
        {
            this.SendPropertyChanging("PartecipazioniTeam");
            entity.Campionati = null;
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.Circuiti in the schema.
    /// </summary>
    [Table(Name = @"datarace.circuiti")]
    public partial class Circuiti : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _IdCircuito;

        private string _Nome;

        private string _Localita;

        private int _LunghezzaInMetri;

        private int _NumeroCurveSinistra;

        private int _NumeroCurveDestra;

        private int _LunghezzaRettilineoInMetri;
        #pragma warning restore 0649

        private EntitySet<Prove> _Prove;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdCircuitoChanging(string value);
        partial void OnIdCircuitoChanged();
        partial void OnNomeChanging(string value);
        partial void OnNomeChanged();
        partial void OnLocalitaChanging(string value);
        partial void OnLocalitaChanged();
        partial void OnLunghezzaInMetriChanging(int value);
        partial void OnLunghezzaInMetriChanged();
        partial void OnNumeroCurveSinistraChanging(int value);
        partial void OnNumeroCurveSinistraChanged();
        partial void OnNumeroCurveDestraChanging(int value);
        partial void OnNumeroCurveDestraChanged();
        partial void OnLunghezzaRettilineoInMetriChanging(int value);
        partial void OnLunghezzaRettilineoInMetriChanged();
        #endregion

        public Circuiti()
        {
            this._Prove = new EntitySet<Prove>(new Action<Prove>(this.attach_Prove), new Action<Prove>(this.detach_Prove));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdCircuito in the schema.
        /// </summary>
        [Column(Name = @"idCircuito", Storage = "_IdCircuito", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string IdCircuito
        {
            get
            {
                return this._IdCircuito;
            }
            set
            {
                if (this._IdCircuito != value)
                {
                    this.OnIdCircuitoChanging(value);
                    this.SendPropertyChanging("IdCircuito");
                    this._IdCircuito = value;
                    this.SendPropertyChanged("IdCircuito");
                    this.OnIdCircuitoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nome in the schema.
        /// </summary>
        [Column(Name = @"nome", Storage = "_Nome", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nome
        {
            get
            {
                return this._Nome;
            }
            set
            {
                if (this._Nome != value)
                {
                    this.OnNomeChanging(value);
                    this.SendPropertyChanging("Nome");
                    this._Nome = value;
                    this.SendPropertyChanged("Nome");
                    this.OnNomeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Localita in the schema.
        /// </summary>
        [Column(Name = @"localita", Storage = "_Localita", CanBeNull = false, DbType = "CHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Localita
        {
            get
            {
                return this._Localita;
            }
            set
            {
                if (this._Localita != value)
                {
                    this.OnLocalitaChanging(value);
                    this.SendPropertyChanging("Localita");
                    this._Localita = value;
                    this.SendPropertyChanged("Localita");
                    this.OnLocalitaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LunghezzaInMetri in the schema.
        /// </summary>
        [Column(Name = @"lunghezzaInMetri", Storage = "_LunghezzaInMetri", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LunghezzaInMetri
        {
            get
            {
                return this._LunghezzaInMetri;
            }
            set
            {
                if (this._LunghezzaInMetri != value)
                {
                    this.OnLunghezzaInMetriChanging(value);
                    this.SendPropertyChanging("LunghezzaInMetri");
                    this._LunghezzaInMetri = value;
                    this.SendPropertyChanged("LunghezzaInMetri");
                    this.OnLunghezzaInMetriChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumeroCurveSinistra in the schema.
        /// </summary>
        [Column(Name = @"numeroCurveSinistra", Storage = "_NumeroCurveSinistra", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int NumeroCurveSinistra
        {
            get
            {
                return this._NumeroCurveSinistra;
            }
            set
            {
                if (this._NumeroCurveSinistra != value)
                {
                    this.OnNumeroCurveSinistraChanging(value);
                    this.SendPropertyChanging("NumeroCurveSinistra");
                    this._NumeroCurveSinistra = value;
                    this.SendPropertyChanged("NumeroCurveSinistra");
                    this.OnNumeroCurveSinistraChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumeroCurveDestra in the schema.
        /// </summary>
        [Column(Name = @"numeroCurveDestra", Storage = "_NumeroCurveDestra", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int NumeroCurveDestra
        {
            get
            {
                return this._NumeroCurveDestra;
            }
            set
            {
                if (this._NumeroCurveDestra != value)
                {
                    this.OnNumeroCurveDestraChanging(value);
                    this.SendPropertyChanging("NumeroCurveDestra");
                    this._NumeroCurveDestra = value;
                    this.SendPropertyChanged("NumeroCurveDestra");
                    this.OnNumeroCurveDestraChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LunghezzaRettilineoInMetri in the schema.
        /// </summary>
        [Column(Name = @"lunghezzaRettilineoInMetri", Storage = "_LunghezzaRettilineoInMetri", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int LunghezzaRettilineoInMetri
        {
            get
            {
                return this._LunghezzaRettilineoInMetri;
            }
            set
            {
                if (this._LunghezzaRettilineoInMetri != value)
                {
                    this.OnLunghezzaRettilineoInMetriChanging(value);
                    this.SendPropertyChanging("LunghezzaRettilineoInMetri");
                    this._LunghezzaRettilineoInMetri = value;
                    this.SendPropertyChanged("LunghezzaRettilineoInMetri");
                    this.OnLunghezzaRettilineoInMetriChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Prove in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Circuiti_Prove", Storage="_Prove", ThisKey="IdCircuito", OtherKey="Circuito", DeleteRule="NO ACTION")]
        public EntitySet<Prove> Prove
        {
            get
            {
                return this._Prove;
            }
            set
            {
                this._Prove.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Prove(Prove entity)
        {
            this.SendPropertyChanging("Prove");
            entity.Circuiti = this;
        }
    
        private void detach_Prove(Prove entity)
        {
            this.SendPropertyChanging("Prove");
            entity.Circuiti = null;
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.Classi in the schema.
    /// </summary>
    [Table(Name = @"datarace.classi")]
    public partial class Classi : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Nome;

        private string _CilindrataMinima;

        private string _CilindrataMassima;

        private int _EtaMinima;

        private int _EtaMassima;
        #pragma warning restore 0649

        private EntitySet<Campionati> _Campionati;

        private EntitySet<Gare> _Gare;

        private EntitySet<Iscrizioni> _Iscrizioni;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnNomeChanging(string value);
        partial void OnNomeChanged();
        partial void OnCilindrataMinimaChanging(string value);
        partial void OnCilindrataMinimaChanged();
        partial void OnCilindrataMassimaChanging(string value);
        partial void OnCilindrataMassimaChanged();
        partial void OnEtaMinimaChanging(int value);
        partial void OnEtaMinimaChanged();
        partial void OnEtaMassimaChanging(int value);
        partial void OnEtaMassimaChanged();
        #endregion

        public Classi()
        {
            this._Campionati = new EntitySet<Campionati>(new Action<Campionati>(this.attach_Campionati), new Action<Campionati>(this.detach_Campionati));
            this._Gare = new EntitySet<Gare>(new Action<Gare>(this.attach_Gare), new Action<Gare>(this.detach_Gare));
            this._Iscrizioni = new EntitySet<Iscrizioni>(new Action<Iscrizioni>(this.attach_Iscrizioni), new Action<Iscrizioni>(this.detach_Iscrizioni));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Nome in the schema.
        /// </summary>
        [Column(Name = @"nome", Storage = "_Nome", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string Nome
        {
            get
            {
                return this._Nome;
            }
            set
            {
                if (this._Nome != value)
                {
                    this.OnNomeChanging(value);
                    this.SendPropertyChanging("Nome");
                    this._Nome = value;
                    this.SendPropertyChanged("Nome");
                    this.OnNomeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CilindrataMinima in the schema.
        /// </summary>
        [Column(Name = @"cilindrataMinima", Storage = "_CilindrataMinima", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CilindrataMinima
        {
            get
            {
                return this._CilindrataMinima;
            }
            set
            {
                if (this._CilindrataMinima != value)
                {
                    this.OnCilindrataMinimaChanging(value);
                    this.SendPropertyChanging("CilindrataMinima");
                    this._CilindrataMinima = value;
                    this.SendPropertyChanged("CilindrataMinima");
                    this.OnCilindrataMinimaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CilindrataMassima in the schema.
        /// </summary>
        [Column(Name = @"cilindrataMassima", Storage = "_CilindrataMassima", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CilindrataMassima
        {
            get
            {
                return this._CilindrataMassima;
            }
            set
            {
                if (this._CilindrataMassima != value)
                {
                    this.OnCilindrataMassimaChanging(value);
                    this.SendPropertyChanging("CilindrataMassima");
                    this._CilindrataMassima = value;
                    this.SendPropertyChanged("CilindrataMassima");
                    this.OnCilindrataMassimaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EtaMinima in the schema.
        /// </summary>
        [Column(Name = @"etaMinima", Storage = "_EtaMinima", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int EtaMinima
        {
            get
            {
                return this._EtaMinima;
            }
            set
            {
                if (this._EtaMinima != value)
                {
                    this.OnEtaMinimaChanging(value);
                    this.SendPropertyChanging("EtaMinima");
                    this._EtaMinima = value;
                    this.SendPropertyChanged("EtaMinima");
                    this.OnEtaMinimaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EtaMassima in the schema.
        /// </summary>
        [Column(Name = @"etaMassima", Storage = "_EtaMassima", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int EtaMassima
        {
            get
            {
                return this._EtaMassima;
            }
            set
            {
                if (this._EtaMassima != value)
                {
                    this.OnEtaMassimaChanging(value);
                    this.SendPropertyChanging("EtaMassima");
                    this._EtaMassima = value;
                    this.SendPropertyChanged("EtaMassima");
                    this.OnEtaMassimaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Campionati in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Classi_Campionati", Storage="_Campionati", ThisKey="Nome", OtherKey="Classe", DeleteRule="NO ACTION")]
        public EntitySet<Campionati> Campionati
        {
            get
            {
                return this._Campionati;
            }
            set
            {
                this._Campionati.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Gare in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Classi_Gare", Storage="_Gare", ThisKey="Nome", OtherKey="Classe", DeleteRule="NO ACTION")]
        public EntitySet<Gare> Gare
        {
            get
            {
                return this._Gare;
            }
            set
            {
                this._Gare.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Iscrizioni in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Classi_Iscrizioni", Storage="_Iscrizioni", ThisKey="Nome", OtherKey="Classe", DeleteRule="NO ACTION")]
        public EntitySet<Iscrizioni> Iscrizioni
        {
            get
            {
                return this._Iscrizioni;
            }
            set
            {
                this._Iscrizioni.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Campionati(Campionati entity)
        {
            this.SendPropertyChanging("Campionati");
            entity.Classi = this;
        }
    
        private void detach_Campionati(Campionati entity)
        {
            this.SendPropertyChanging("Campionati");
            entity.Classi = null;
        }

        private void attach_Gare(Gare entity)
        {
            this.SendPropertyChanging("Gare");
            entity.Classi = this;
        }
    
        private void detach_Gare(Gare entity)
        {
            this.SendPropertyChanging("Gare");
            entity.Classi = null;
        }

        private void attach_Iscrizioni(Iscrizioni entity)
        {
            this.SendPropertyChanging("Iscrizioni");
            entity.Classi = this;
        }
    
        private void detach_Iscrizioni(Iscrizioni entity)
        {
            this.SendPropertyChanging("Iscrizioni");
            entity.Classi = null;
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.Costruttori in the schema.
    /// </summary>
    [Table(Name = @"datarace.costruttori")]
    public partial class Costruttori : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _IdCostruttore;

        private string _Nome;

        private int _AnnoDiEsordio;

        private string _Paese;
        #pragma warning restore 0649

        private EntitySet<Affiliazioni> _Affiliazioni;

        private EntitySet<Modelli> _Modelli;

        private EntitySet<PartecipazioniCostruttore> _PartecipazioniCostruttore;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdCostruttoreChanging(string value);
        partial void OnIdCostruttoreChanged();
        partial void OnNomeChanging(string value);
        partial void OnNomeChanged();
        partial void OnAnnoDiEsordioChanging(int value);
        partial void OnAnnoDiEsordioChanged();
        partial void OnPaeseChanging(string value);
        partial void OnPaeseChanged();
        #endregion

        public Costruttori()
        {
            this._Affiliazioni = new EntitySet<Affiliazioni>(new Action<Affiliazioni>(this.attach_Affiliazioni), new Action<Affiliazioni>(this.detach_Affiliazioni));
            this._Modelli = new EntitySet<Modelli>(new Action<Modelli>(this.attach_Modelli), new Action<Modelli>(this.detach_Modelli));
            this._PartecipazioniCostruttore = new EntitySet<PartecipazioniCostruttore>(new Action<PartecipazioniCostruttore>(this.attach_PartecipazioniCostruttore), new Action<PartecipazioniCostruttore>(this.detach_PartecipazioniCostruttore));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdCostruttore in the schema.
        /// </summary>
        [Column(Name = @"idCostruttore", Storage = "_IdCostruttore", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string IdCostruttore
        {
            get
            {
                return this._IdCostruttore;
            }
            set
            {
                if (this._IdCostruttore != value)
                {
                    this.OnIdCostruttoreChanging(value);
                    this.SendPropertyChanging("IdCostruttore");
                    this._IdCostruttore = value;
                    this.SendPropertyChanged("IdCostruttore");
                    this.OnIdCostruttoreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nome in the schema.
        /// </summary>
        [Column(Name = @"nome", Storage = "_Nome", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nome
        {
            get
            {
                return this._Nome;
            }
            set
            {
                if (this._Nome != value)
                {
                    this.OnNomeChanging(value);
                    this.SendPropertyChanging("Nome");
                    this._Nome = value;
                    this.SendPropertyChanged("Nome");
                    this.OnNomeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AnnoDiEsordio in the schema.
        /// </summary>
        [Column(Name = @"annoDiEsordio", Storage = "_AnnoDiEsordio", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int AnnoDiEsordio
        {
            get
            {
                return this._AnnoDiEsordio;
            }
            set
            {
                if (this._AnnoDiEsordio != value)
                {
                    this.OnAnnoDiEsordioChanging(value);
                    this.SendPropertyChanging("AnnoDiEsordio");
                    this._AnnoDiEsordio = value;
                    this.SendPropertyChanged("AnnoDiEsordio");
                    this.OnAnnoDiEsordioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Paese in the schema.
        /// </summary>
        [Column(Name = @"paese", Storage = "_Paese", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Paese
        {
            get
            {
                return this._Paese;
            }
            set
            {
                if (this._Paese != value)
                {
                    this.OnPaeseChanging(value);
                    this.SendPropertyChanging("Paese");
                    this._Paese = value;
                    this.SendPropertyChanged("Paese");
                    this.OnPaeseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Affiliazioni in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Costruttori_Affiliazioni", Storage="_Affiliazioni", ThisKey="IdCostruttore", OtherKey="Costruttore", DeleteRule="NO ACTION")]
        public EntitySet<Affiliazioni> Affiliazioni
        {
            get
            {
                return this._Affiliazioni;
            }
            set
            {
                this._Affiliazioni.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Modelli in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Costruttori_Modelli", Storage="_Modelli", ThisKey="IdCostruttore", OtherKey="Costruttore", DeleteRule="NO ACTION")]
        public EntitySet<Modelli> Modelli
        {
            get
            {
                return this._Modelli;
            }
            set
            {
                this._Modelli.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PartecipazioniCostruttore in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Costruttori_PartecipazioniCostruttore", Storage="_PartecipazioniCostruttore", ThisKey="IdCostruttore", OtherKey="Costruttore", DeleteRule="NO ACTION")]
        public EntitySet<PartecipazioniCostruttore> PartecipazioniCostruttore
        {
            get
            {
                return this._PartecipazioniCostruttore;
            }
            set
            {
                this._PartecipazioniCostruttore.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Affiliazioni(Affiliazioni entity)
        {
            this.SendPropertyChanging("Affiliazioni");
            entity.Costruttori = this;
        }
    
        private void detach_Affiliazioni(Affiliazioni entity)
        {
            this.SendPropertyChanging("Affiliazioni");
            entity.Costruttori = null;
        }

        private void attach_Modelli(Modelli entity)
        {
            this.SendPropertyChanging("Modelli");
            entity.Costruttori = this;
        }
    
        private void detach_Modelli(Modelli entity)
        {
            this.SendPropertyChanging("Modelli");
            entity.Costruttori = null;
        }

        private void attach_PartecipazioniCostruttore(PartecipazioniCostruttore entity)
        {
            this.SendPropertyChanging("PartecipazioniCostruttore");
            entity.Costruttori = this;
        }
    
        private void detach_PartecipazioniCostruttore(PartecipazioniCostruttore entity)
        {
            this.SendPropertyChanging("PartecipazioniCostruttore");
            entity.Costruttori = null;
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.Gare in the schema.
    /// </summary>
    [Table(Name = @"datarace.gare")]
    public partial class Gare : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _IdGara;

        private string _Classe;

        private int _PosizioneCalendario;

        private int _Anno;

        private System.DateTime _Data;

        private System.TimeSpan _OraInizio;

        private int _NumeroGiri;

        private string _CondizioniTracciato;
        #pragma warning restore 0649

        private EntityRef<Prove> _Prove;

        private EntityRef<Classi> _Classi;

        private EntitySet<Risultati> _Risultati;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdGaraChanging(string value);
        partial void OnIdGaraChanged();
        partial void OnClasseChanging(string value);
        partial void OnClasseChanged();
        partial void OnPosizioneCalendarioChanging(int value);
        partial void OnPosizioneCalendarioChanged();
        partial void OnAnnoChanging(int value);
        partial void OnAnnoChanged();
        partial void OnDataChanging(System.DateTime value);
        partial void OnDataChanged();
        partial void OnOraInizioChanging(System.TimeSpan value);
        partial void OnOraInizioChanged();
        partial void OnNumeroGiriChanging(int value);
        partial void OnNumeroGiriChanged();
        partial void OnCondizioniTracciatoChanging(string value);
        partial void OnCondizioniTracciatoChanged();
        #endregion

        public Gare()
        {
            this._Prove  = default(EntityRef<Prove>);
            this._Classi  = default(EntityRef<Classi>);
            this._Risultati = new EntitySet<Risultati>(new Action<Risultati>(this.attach_Risultati), new Action<Risultati>(this.detach_Risultati));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdGara in the schema.
        /// </summary>
        [Column(Name = @"idGara", Storage = "_IdGara", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string IdGara
        {
            get
            {
                return this._IdGara;
            }
            set
            {
                if (this._IdGara != value)
                {
                    this.OnIdGaraChanging(value);
                    this.SendPropertyChanging("IdGara");
                    this._IdGara = value;
                    this.SendPropertyChanged("IdGara");
                    this.OnIdGaraChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Classe in the schema.
        /// </summary>
        [Column(Name = @"classe", Storage = "_Classe", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Classe
        {
            get
            {
                return this._Classe;
            }
            set
            {
                if (this._Classe != value)
                {
                    if (this._Classi.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnClasseChanging(value);
                    this.SendPropertyChanging("Classe");
                    this._Classe = value;
                    this.SendPropertyChanged("Classe");
                    this.OnClasseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosizioneCalendario in the schema.
        /// </summary>
        [Column(Name = @"posizioneCalendario", Storage = "_PosizioneCalendario", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PosizioneCalendario
        {
            get
            {
                return this._PosizioneCalendario;
            }
            set
            {
                if (this._PosizioneCalendario != value)
                {
                    if (this._Prove.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPosizioneCalendarioChanging(value);
                    this.SendPropertyChanging("PosizioneCalendario");
                    this._PosizioneCalendario = value;
                    this.SendPropertyChanged("PosizioneCalendario");
                    this.OnPosizioneCalendarioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Anno in the schema.
        /// </summary>
        [Column(Name = @"anno", Storage = "_Anno", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Anno
        {
            get
            {
                return this._Anno;
            }
            set
            {
                if (this._Anno != value)
                {
                    if (this._Prove.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnnoChanging(value);
                    this.SendPropertyChanging("Anno");
                    this._Anno = value;
                    this.SendPropertyChanged("Anno");
                    this.OnAnnoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Data in the schema.
        /// </summary>
        [Column(Name = @"`data`", Storage = "_Data", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Data
        {
            get
            {
                return this._Data;
            }
            set
            {
                if (this._Data != value)
                {
                    this.OnDataChanging(value);
                    this.SendPropertyChanging("Data");
                    this._Data = value;
                    this.SendPropertyChanged("Data");
                    this.OnDataChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OraInizio in the schema.
        /// </summary>
        [Column(Name = @"oraInizio", Storage = "_OraInizio", CanBeNull = false, DbType = "TIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.TimeSpan OraInizio
        {
            get
            {
                return this._OraInizio;
            }
            set
            {
                if (this._OraInizio != value)
                {
                    this.OnOraInizioChanging(value);
                    this.SendPropertyChanging("OraInizio");
                    this._OraInizio = value;
                    this.SendPropertyChanged("OraInizio");
                    this.OnOraInizioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumeroGiri in the schema.
        /// </summary>
        [Column(Name = @"numeroGiri", Storage = "_NumeroGiri", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int NumeroGiri
        {
            get
            {
                return this._NumeroGiri;
            }
            set
            {
                if (this._NumeroGiri != value)
                {
                    this.OnNumeroGiriChanging(value);
                    this.SendPropertyChanging("NumeroGiri");
                    this._NumeroGiri = value;
                    this.SendPropertyChanged("NumeroGiri");
                    this.OnNumeroGiriChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CondizioniTracciato in the schema.
        /// </summary>
        [Column(Name = @"condizioniTracciato", Storage = "_CondizioniTracciato", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CondizioniTracciato
        {
            get
            {
                return this._CondizioniTracciato;
            }
            set
            {
                if (this._CondizioniTracciato != value)
                {
                    this.OnCondizioniTracciatoChanging(value);
                    this.SendPropertyChanging("CondizioniTracciato");
                    this._CondizioniTracciato = value;
                    this.SendPropertyChanged("CondizioniTracciato");
                    this.OnCondizioniTracciatoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Prove in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Prove_Gare", Storage="_Prove", ThisKey="PosizioneCalendario,Anno", OtherKey="Anno,PosizioneCalendario", IsForeignKey=true)]
        public Prove Prove
        {
            get
            {
                return this._Prove.Entity;
            }
            set
            {
                Prove previousValue = this._Prove.Entity;
                if ((previousValue != value) || (this._Prove.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Prove");
                    if (previousValue != null)
                    {
                        this._Prove.Entity = null;
                        previousValue.Gare.Remove(this);
                    }
                    this._Prove.Entity = value;
                    if (value != null)
                    {
                        this._PosizioneCalendario = value.Anno;
                        this._Anno = value.PosizioneCalendario;
                        value.Gare.Add(this);
                    }
                    else
                    {
                        this._PosizioneCalendario = default(int);
                        this._Anno = default(int);
                    }
                    this.SendPropertyChanged("Prove");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Classi in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Classi_Gare", Storage="_Classi", ThisKey="Classe", OtherKey="Nome", IsForeignKey=true)]
        public Classi Classi
        {
            get
            {
                return this._Classi.Entity;
            }
            set
            {
                Classi previousValue = this._Classi.Entity;
                if ((previousValue != value) || (this._Classi.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Classi");
                    if (previousValue != null)
                    {
                        this._Classi.Entity = null;
                        previousValue.Gare.Remove(this);
                    }
                    this._Classi.Entity = value;
                    if (value != null)
                    {
                        this._Classe = value.Nome;
                        value.Gare.Add(this);
                    }
                    else
                    {
                        this._Classe = default(string);
                    }
                    this.SendPropertyChanged("Classi");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Risultati in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Gare_Risultati", Storage="_Risultati", ThisKey="IdGara", OtherKey="Gara", DeleteRule="NO ACTION")]
        public EntitySet<Risultati> Risultati
        {
            get
            {
                return this._Risultati;
            }
            set
            {
                this._Risultati.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Risultati(Risultati entity)
        {
            this.SendPropertyChanging("Risultati");
            entity.Gare = this;
        }
    
        private void detach_Risultati(Risultati entity)
        {
            this.SendPropertyChanging("Risultati");
            entity.Gare = null;
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.GranPremi in the schema.
    /// </summary>
    [Table(Name = @"datarace.gran_premi")]
    public partial class GranPremi : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _IdGranPremio;

        private string _Denominazione;

        private int _AnnoPrimaEdizione;
        #pragma warning restore 0649

        private EntitySet<Prove> _Prove;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdGranPremioChanging(string value);
        partial void OnIdGranPremioChanged();
        partial void OnDenominazioneChanging(string value);
        partial void OnDenominazioneChanged();
        partial void OnAnnoPrimaEdizioneChanging(int value);
        partial void OnAnnoPrimaEdizioneChanged();
        #endregion

        public GranPremi()
        {
            this._Prove = new EntitySet<Prove>(new Action<Prove>(this.attach_Prove), new Action<Prove>(this.detach_Prove));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdGranPremio in the schema.
        /// </summary>
        [Column(Name = @"idGranPremio", Storage = "_IdGranPremio", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string IdGranPremio
        {
            get
            {
                return this._IdGranPremio;
            }
            set
            {
                if (this._IdGranPremio != value)
                {
                    this.OnIdGranPremioChanging(value);
                    this.SendPropertyChanging("IdGranPremio");
                    this._IdGranPremio = value;
                    this.SendPropertyChanged("IdGranPremio");
                    this.OnIdGranPremioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Denominazione in the schema.
        /// </summary>
        [Column(Name = @"denominazione", Storage = "_Denominazione", CanBeNull = false, DbType = "CHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Denominazione
        {
            get
            {
                return this._Denominazione;
            }
            set
            {
                if (this._Denominazione != value)
                {
                    this.OnDenominazioneChanging(value);
                    this.SendPropertyChanging("Denominazione");
                    this._Denominazione = value;
                    this.SendPropertyChanged("Denominazione");
                    this.OnDenominazioneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AnnoPrimaEdizione in the schema.
        /// </summary>
        [Column(Name = @"annoPrimaEdizione", Storage = "_AnnoPrimaEdizione", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int AnnoPrimaEdizione
        {
            get
            {
                return this._AnnoPrimaEdizione;
            }
            set
            {
                if (this._AnnoPrimaEdizione != value)
                {
                    this.OnAnnoPrimaEdizioneChanging(value);
                    this.SendPropertyChanging("AnnoPrimaEdizione");
                    this._AnnoPrimaEdizione = value;
                    this.SendPropertyChanged("AnnoPrimaEdizione");
                    this.OnAnnoPrimaEdizioneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Prove in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="GranPremi_Prove", Storage="_Prove", ThisKey="IdGranPremio", OtherKey="GranPremio", DeleteRule="NO ACTION")]
        public EntitySet<Prove> Prove
        {
            get
            {
                return this._Prove;
            }
            set
            {
                this._Prove.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Prove(Prove entity)
        {
            this.SendPropertyChanging("Prove");
            entity.GranPremi = this;
        }
    
        private void detach_Prove(Prove entity)
        {
            this.SendPropertyChanging("Prove");
            entity.GranPremi = null;
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.Iscrizioni in the schema.
    /// </summary>
    [Table(Name = @"datarace.iscrizioni")]
    public partial class Iscrizioni : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Pilota;

        private string _Classe;

        private string _Team;

        private int _PosizioneCalendario;

        private int _Anno;

        private int _NumeroDiGara;

        private string _TipoIscrizione;

        private string _Risultato;

        private string _Costruttore;

        private string _Modello;
        #pragma warning restore 0649

        private EntityRef<Risultati> _Risultati;

        private EntityRef<Prove> _Prove;

        private EntityRef<Piloti> _Piloti;

        private EntityRef<StagioniTeam> _StagioniTeam;

        private EntityRef<Modelli> _Modelli;

        private EntityRef<Classi> _Classi;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPilotaChanging(string value);
        partial void OnPilotaChanged();
        partial void OnClasseChanging(string value);
        partial void OnClasseChanged();
        partial void OnTeamChanging(string value);
        partial void OnTeamChanged();
        partial void OnPosizioneCalendarioChanging(int value);
        partial void OnPosizioneCalendarioChanged();
        partial void OnAnnoChanging(int value);
        partial void OnAnnoChanged();
        partial void OnNumeroDiGaraChanging(int value);
        partial void OnNumeroDiGaraChanged();
        partial void OnTipoIscrizioneChanging(string value);
        partial void OnTipoIscrizioneChanged();
        partial void OnRisultatoChanging(string value);
        partial void OnRisultatoChanged();
        partial void OnCostruttoreChanging(string value);
        partial void OnCostruttoreChanged();
        partial void OnModelloChanging(string value);
        partial void OnModelloChanged();
        #endregion

        public Iscrizioni()
        {
            this._Risultati  = default(EntityRef<Risultati>);
            this._Prove  = default(EntityRef<Prove>);
            this._Piloti  = default(EntityRef<Piloti>);
            this._StagioniTeam  = default(EntityRef<StagioniTeam>);
            this._Modelli  = default(EntityRef<Modelli>);
            this._Classi  = default(EntityRef<Classi>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Pilota in the schema.
        /// </summary>
        [Column(Name = @"pilota", Storage = "_Pilota", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string Pilota
        {
            get
            {
                return this._Pilota;
            }
            set
            {
                if (this._Pilota != value)
                {
                    if (this._Piloti.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPilotaChanging(value);
                    this.SendPropertyChanging("Pilota");
                    this._Pilota = value;
                    this.SendPropertyChanged("Pilota");
                    this.OnPilotaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Classe in the schema.
        /// </summary>
        [Column(Name = @"classe", Storage = "_Classe", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string Classe
        {
            get
            {
                return this._Classe;
            }
            set
            {
                if (this._Classe != value)
                {
                    if (this._Classi.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnClasseChanging(value);
                    this.SendPropertyChanging("Classe");
                    this._Classe = value;
                    this.SendPropertyChanged("Classe");
                    this.OnClasseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Team in the schema.
        /// </summary>
        [Column(Name = @"team", Storage = "_Team", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string Team
        {
            get
            {
                return this._Team;
            }
            set
            {
                if (this._Team != value)
                {
                    if (this._StagioniTeam.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTeamChanging(value);
                    this.SendPropertyChanging("Team");
                    this._Team = value;
                    this.SendPropertyChanged("Team");
                    this.OnTeamChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosizioneCalendario in the schema.
        /// </summary>
        [Column(Name = @"posizioneCalendario", Storage = "_PosizioneCalendario", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int PosizioneCalendario
        {
            get
            {
                return this._PosizioneCalendario;
            }
            set
            {
                if (this._PosizioneCalendario != value)
                {
                    if (this._Prove.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPosizioneCalendarioChanging(value);
                    this.SendPropertyChanging("PosizioneCalendario");
                    this._PosizioneCalendario = value;
                    this.SendPropertyChanged("PosizioneCalendario");
                    this.OnPosizioneCalendarioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Anno in the schema.
        /// </summary>
        [Column(Name = @"anno", Storage = "_Anno", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int Anno
        {
            get
            {
                return this._Anno;
            }
            set
            {
                if (this._Anno != value)
                {
                    if (this._Prove.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnnoChanging(value);
                    this.SendPropertyChanging("Anno");
                    this._Anno = value;
                    this.SendPropertyChanged("Anno");
                    this.OnAnnoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumeroDiGara in the schema.
        /// </summary>
        [Column(Name = @"numeroDiGara", Storage = "_NumeroDiGara", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int NumeroDiGara
        {
            get
            {
                return this._NumeroDiGara;
            }
            set
            {
                if (this._NumeroDiGara != value)
                {
                    this.OnNumeroDiGaraChanging(value);
                    this.SendPropertyChanging("NumeroDiGara");
                    this._NumeroDiGara = value;
                    this.SendPropertyChanged("NumeroDiGara");
                    this.OnNumeroDiGaraChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TipoIscrizione in the schema.
        /// </summary>
        [Column(Name = @"tipoIscrizione", Storage = "_TipoIscrizione", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string TipoIscrizione
        {
            get
            {
                return this._TipoIscrizione;
            }
            set
            {
                if (this._TipoIscrizione != value)
                {
                    this.OnTipoIscrizioneChanging(value);
                    this.SendPropertyChanging("TipoIscrizione");
                    this._TipoIscrizione = value;
                    this.SendPropertyChanged("TipoIscrizione");
                    this.OnTipoIscrizioneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Risultato in the schema.
        /// </summary>
        [Column(Name = @"risultato", Storage = "_Risultato", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Risultato
        {
            get
            {
                return this._Risultato;
            }
            set
            {
                if (this._Risultato != value)
                {
                    if (this._Risultati.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnRisultatoChanging(value);
                    this.SendPropertyChanging("Risultato");
                    this._Risultato = value;
                    this.SendPropertyChanged("Risultato");
                    this.OnRisultatoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Costruttore in the schema.
        /// </summary>
        [Column(Name = @"costruttore", Storage = "_Costruttore", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Costruttore
        {
            get
            {
                return this._Costruttore;
            }
            set
            {
                if (this._Costruttore != value)
                {
                    if (this._Modelli.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCostruttoreChanging(value);
                    this.SendPropertyChanging("Costruttore");
                    this._Costruttore = value;
                    this.SendPropertyChanged("Costruttore");
                    this.OnCostruttoreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Modello in the schema.
        /// </summary>
        [Column(Name = @"modello", Storage = "_Modello", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Modello
        {
            get
            {
                return this._Modello;
            }
            set
            {
                if (this._Modello != value)
                {
                    if (this._Modelli.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnModelloChanging(value);
                    this.SendPropertyChanging("Modello");
                    this._Modello = value;
                    this.SendPropertyChanged("Modello");
                    this.OnModelloChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Risultati in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Risultati_Iscrizioni", Storage="_Risultati", ThisKey="Risultato", OtherKey="IdRisultato", IsForeignKey=true)]
        public Risultati Risultati
        {
            get
            {
                return this._Risultati.Entity;
            }
            set
            {
                Risultati previousValue = this._Risultati.Entity;
                if ((previousValue != value) || (this._Risultati.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Risultati");
                    if (previousValue != null)
                    {
                        this._Risultati.Entity = null;
                        previousValue.Iscrizioni.Remove(this);
                    }
                    this._Risultati.Entity = value;
                    if (value != null)
                    {
                        this._Risultato = value.IdRisultato;
                        value.Iscrizioni.Add(this);
                    }
                    else
                    {
                        this._Risultato = default(string);
                    }
                    this.SendPropertyChanged("Risultati");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Prove in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Prove_Iscrizioni", Storage="_Prove", ThisKey="PosizioneCalendario,Anno", OtherKey="Anno,PosizioneCalendario", IsForeignKey=true)]
        public Prove Prove
        {
            get
            {
                return this._Prove.Entity;
            }
            set
            {
                Prove previousValue = this._Prove.Entity;
                if ((previousValue != value) || (this._Prove.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Prove");
                    if (previousValue != null)
                    {
                        this._Prove.Entity = null;
                        previousValue.Iscrizioni.Remove(this);
                    }
                    this._Prove.Entity = value;
                    if (value != null)
                    {
                        this._PosizioneCalendario = value.Anno;
                        this._Anno = value.PosizioneCalendario;
                        value.Iscrizioni.Add(this);
                    }
                    else
                    {
                        this._PosizioneCalendario = default(int);
                        this._Anno = default(int);
                    }
                    this.SendPropertyChanged("Prove");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Piloti in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Piloti_Iscrizioni", Storage="_Piloti", ThisKey="Pilota", OtherKey="IdPilota", IsForeignKey=true)]
        public Piloti Piloti
        {
            get
            {
                return this._Piloti.Entity;
            }
            set
            {
                Piloti previousValue = this._Piloti.Entity;
                if ((previousValue != value) || (this._Piloti.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Piloti");
                    if (previousValue != null)
                    {
                        this._Piloti.Entity = null;
                        previousValue.Iscrizioni.Remove(this);
                    }
                    this._Piloti.Entity = value;
                    if (value != null)
                    {
                        this._Pilota = value.IdPilota;
                        value.Iscrizioni.Add(this);
                    }
                    else
                    {
                        this._Pilota = default(string);
                    }
                    this.SendPropertyChanged("Piloti");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StagioniTeam in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StagioniTeam_Iscrizioni", Storage="_StagioniTeam", ThisKey="Team", OtherKey="NomeUfficiale", IsForeignKey=true)]
        public StagioniTeam StagioniTeam
        {
            get
            {
                return this._StagioniTeam.Entity;
            }
            set
            {
                StagioniTeam previousValue = this._StagioniTeam.Entity;
                if ((previousValue != value) || (this._StagioniTeam.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("StagioniTeam");
                    if (previousValue != null)
                    {
                        this._StagioniTeam.Entity = null;
                        previousValue.Iscrizioni.Remove(this);
                    }
                    this._StagioniTeam.Entity = value;
                    if (value != null)
                    {
                        this._Team = value.NomeUfficiale;
                        value.Iscrizioni.Add(this);
                    }
                    else
                    {
                        this._Team = default(string);
                    }
                    this.SendPropertyChanged("StagioniTeam");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Modelli in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Modelli_Iscrizioni", Storage="_Modelli", ThisKey="Costruttore,Modello", OtherKey="Costruttore,NomeModello", IsForeignKey=true)]
        public Modelli Modelli
        {
            get
            {
                return this._Modelli.Entity;
            }
            set
            {
                Modelli previousValue = this._Modelli.Entity;
                if ((previousValue != value) || (this._Modelli.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Modelli");
                    if (previousValue != null)
                    {
                        this._Modelli.Entity = null;
                        previousValue.Iscrizioni.Remove(this);
                    }
                    this._Modelli.Entity = value;
                    if (value != null)
                    {
                        this._Costruttore = value.Costruttore;
                        this._Modello = value.NomeModello;
                        value.Iscrizioni.Add(this);
                    }
                    else
                    {
                        this._Costruttore = default(string);
                        this._Modello = default(string);
                    }
                    this.SendPropertyChanged("Modelli");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Classi in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Classi_Iscrizioni", Storage="_Classi", ThisKey="Classe", OtherKey="Nome", IsForeignKey=true)]
        public Classi Classi
        {
            get
            {
                return this._Classi.Entity;
            }
            set
            {
                Classi previousValue = this._Classi.Entity;
                if ((previousValue != value) || (this._Classi.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Classi");
                    if (previousValue != null)
                    {
                        this._Classi.Entity = null;
                        previousValue.Iscrizioni.Remove(this);
                    }
                    this._Classi.Entity = value;
                    if (value != null)
                    {
                        this._Classe = value.Nome;
                        value.Iscrizioni.Add(this);
                    }
                    else
                    {
                        this._Classe = default(string);
                    }
                    this.SendPropertyChanged("Classi");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.Modelli in the schema.
    /// </summary>
    [Table(Name = @"datarace.modelli")]
    public partial class Modelli : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Costruttore;

        private string _NomeModello;
        #pragma warning restore 0649

        private EntitySet<Iscrizioni> _Iscrizioni;

        private EntityRef<Costruttori> _Costruttori;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCostruttoreChanging(string value);
        partial void OnCostruttoreChanged();
        partial void OnNomeModelloChanging(string value);
        partial void OnNomeModelloChanged();
        #endregion

        public Modelli()
        {
            this._Iscrizioni = new EntitySet<Iscrizioni>(new Action<Iscrizioni>(this.attach_Iscrizioni), new Action<Iscrizioni>(this.detach_Iscrizioni));
            this._Costruttori  = default(EntityRef<Costruttori>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Costruttore in the schema.
        /// </summary>
        [Column(Name = @"costruttore", Storage = "_Costruttore", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string Costruttore
        {
            get
            {
                return this._Costruttore;
            }
            set
            {
                if (this._Costruttore != value)
                {
                    if (this._Costruttori.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCostruttoreChanging(value);
                    this.SendPropertyChanging("Costruttore");
                    this._Costruttore = value;
                    this.SendPropertyChanged("Costruttore");
                    this.OnCostruttoreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NomeModello in the schema.
        /// </summary>
        [Column(Name = @"nomeModello", Storage = "_NomeModello", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string NomeModello
        {
            get
            {
                return this._NomeModello;
            }
            set
            {
                if (this._NomeModello != value)
                {
                    this.OnNomeModelloChanging(value);
                    this.SendPropertyChanging("NomeModello");
                    this._NomeModello = value;
                    this.SendPropertyChanged("NomeModello");
                    this.OnNomeModelloChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Iscrizioni in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Modelli_Iscrizioni", Storage="_Iscrizioni", ThisKey="Costruttore,NomeModello", OtherKey="Costruttore,Modello", DeleteRule="NO ACTION")]
        public EntitySet<Iscrizioni> Iscrizioni
        {
            get
            {
                return this._Iscrizioni;
            }
            set
            {
                this._Iscrizioni.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Costruttori in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Costruttori_Modelli", Storage="_Costruttori", ThisKey="Costruttore", OtherKey="IdCostruttore", IsForeignKey=true)]
        public Costruttori Costruttori
        {
            get
            {
                return this._Costruttori.Entity;
            }
            set
            {
                Costruttori previousValue = this._Costruttori.Entity;
                if ((previousValue != value) || (this._Costruttori.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Costruttori");
                    if (previousValue != null)
                    {
                        this._Costruttori.Entity = null;
                        previousValue.Modelli.Remove(this);
                    }
                    this._Costruttori.Entity = value;
                    if (value != null)
                    {
                        this._Costruttore = value.IdCostruttore;
                        value.Modelli.Add(this);
                    }
                    else
                    {
                        this._Costruttore = default(string);
                    }
                    this.SendPropertyChanged("Costruttori");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Iscrizioni(Iscrizioni entity)
        {
            this.SendPropertyChanging("Iscrizioni");
            entity.Modelli = this;
        }
    
        private void detach_Iscrizioni(Iscrizioni entity)
        {
            this.SendPropertyChanging("Iscrizioni");
            entity.Modelli = null;
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.PartecipazioniCostruttore in the schema.
    /// </summary>
    [Table(Name = @"datarace.partecipazioni_costruttore")]
    public partial class PartecipazioniCostruttore : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Costruttore;

        private string _Classe;

        private int _Anno;

        private int _Punti;

        private int _PosizioneClassifica;
        #pragma warning restore 0649

        private EntityRef<Campionati> _Campionati;

        private EntityRef<Costruttori> _Costruttori;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCostruttoreChanging(string value);
        partial void OnCostruttoreChanged();
        partial void OnClasseChanging(string value);
        partial void OnClasseChanged();
        partial void OnAnnoChanging(int value);
        partial void OnAnnoChanged();
        partial void OnPuntiChanging(int value);
        partial void OnPuntiChanged();
        partial void OnPosizioneClassificaChanging(int value);
        partial void OnPosizioneClassificaChanged();
        #endregion

        public PartecipazioniCostruttore()
        {
            this._Campionati  = default(EntityRef<Campionati>);
            this._Costruttori  = default(EntityRef<Costruttori>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Costruttore in the schema.
        /// </summary>
        [Column(Name = @"costruttore", Storage = "_Costruttore", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string Costruttore
        {
            get
            {
                return this._Costruttore;
            }
            set
            {
                if (this._Costruttore != value)
                {
                    if (this._Costruttori.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCostruttoreChanging(value);
                    this.SendPropertyChanging("Costruttore");
                    this._Costruttore = value;
                    this.SendPropertyChanged("Costruttore");
                    this.OnCostruttoreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Classe in the schema.
        /// </summary>
        [Column(Name = @"classe", Storage = "_Classe", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string Classe
        {
            get
            {
                return this._Classe;
            }
            set
            {
                if (this._Classe != value)
                {
                    if (this._Campionati.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnClasseChanging(value);
                    this.SendPropertyChanging("Classe");
                    this._Classe = value;
                    this.SendPropertyChanged("Classe");
                    this.OnClasseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Anno in the schema.
        /// </summary>
        [Column(Name = @"anno", Storage = "_Anno", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int Anno
        {
            get
            {
                return this._Anno;
            }
            set
            {
                if (this._Anno != value)
                {
                    if (this._Campionati.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnnoChanging(value);
                    this.SendPropertyChanging("Anno");
                    this._Anno = value;
                    this.SendPropertyChanged("Anno");
                    this.OnAnnoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Punti in the schema.
        /// </summary>
        [Column(Name = @"punti", Storage = "_Punti", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Punti
        {
            get
            {
                return this._Punti;
            }
            set
            {
                if (this._Punti != value)
                {
                    this.OnPuntiChanging(value);
                    this.SendPropertyChanging("Punti");
                    this._Punti = value;
                    this.SendPropertyChanged("Punti");
                    this.OnPuntiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosizioneClassifica in the schema.
        /// </summary>
        [Column(Name = @"posizioneClassifica", Storage = "_PosizioneClassifica", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PosizioneClassifica
        {
            get
            {
                return this._PosizioneClassifica;
            }
            set
            {
                if (this._PosizioneClassifica != value)
                {
                    this.OnPosizioneClassificaChanging(value);
                    this.SendPropertyChanging("PosizioneClassifica");
                    this._PosizioneClassifica = value;
                    this.SendPropertyChanged("PosizioneClassifica");
                    this.OnPosizioneClassificaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Campionati in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Campionati_PartecipazioniCostruttore", Storage="_Campionati", ThisKey="Classe,Anno", OtherKey="Classe,Anno", IsForeignKey=true)]
        public Campionati Campionati
        {
            get
            {
                return this._Campionati.Entity;
            }
            set
            {
                Campionati previousValue = this._Campionati.Entity;
                if ((previousValue != value) || (this._Campionati.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Campionati");
                    if (previousValue != null)
                    {
                        this._Campionati.Entity = null;
                        previousValue.PartecipazioniCostruttore.Remove(this);
                    }
                    this._Campionati.Entity = value;
                    if (value != null)
                    {
                        this._Classe = value.Classe;
                        this._Anno = value.Anno;
                        value.PartecipazioniCostruttore.Add(this);
                    }
                    else
                    {
                        this._Classe = default(string);
                        this._Anno = default(int);
                    }
                    this.SendPropertyChanged("Campionati");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Costruttori in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Costruttori_PartecipazioniCostruttore", Storage="_Costruttori", ThisKey="Costruttore", OtherKey="IdCostruttore", IsForeignKey=true)]
        public Costruttori Costruttori
        {
            get
            {
                return this._Costruttori.Entity;
            }
            set
            {
                Costruttori previousValue = this._Costruttori.Entity;
                if ((previousValue != value) || (this._Costruttori.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Costruttori");
                    if (previousValue != null)
                    {
                        this._Costruttori.Entity = null;
                        previousValue.PartecipazioniCostruttore.Remove(this);
                    }
                    this._Costruttori.Entity = value;
                    if (value != null)
                    {
                        this._Costruttore = value.IdCostruttore;
                        value.PartecipazioniCostruttore.Add(this);
                    }
                    else
                    {
                        this._Costruttore = default(string);
                    }
                    this.SendPropertyChanged("Costruttori");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.PartecipazioniPilota in the schema.
    /// </summary>
    [Table(Name = @"datarace.partecipazioni_pilota")]
    public partial class PartecipazioniPilota : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Classe;

        private int _Anno;

        private string _Pilota;

        private int _Eta;

        private int _Esperienza;

        private double _PuntiTotali;

        private double? _PuntiValidi;

        private int _PosizioneClassifica;
        #pragma warning restore 0649

        private EntityRef<Campionati> _Campionati;

        private EntityRef<Piloti> _Piloti;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnClasseChanging(string value);
        partial void OnClasseChanged();
        partial void OnAnnoChanging(int value);
        partial void OnAnnoChanged();
        partial void OnPilotaChanging(string value);
        partial void OnPilotaChanged();
        partial void OnEtaChanging(int value);
        partial void OnEtaChanged();
        partial void OnEsperienzaChanging(int value);
        partial void OnEsperienzaChanged();
        partial void OnPuntiTotaliChanging(double value);
        partial void OnPuntiTotaliChanged();
        partial void OnPuntiValidiChanging(double? value);
        partial void OnPuntiValidiChanged();
        partial void OnPosizioneClassificaChanging(int value);
        partial void OnPosizioneClassificaChanged();
        #endregion

        public PartecipazioniPilota()
        {
            this._Campionati  = default(EntityRef<Campionati>);
            this._Piloti  = default(EntityRef<Piloti>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Classe in the schema.
        /// </summary>
        [Column(Name = @"classe", Storage = "_Classe", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string Classe
        {
            get
            {
                return this._Classe;
            }
            set
            {
                if (this._Classe != value)
                {
                    if (this._Campionati.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnClasseChanging(value);
                    this.SendPropertyChanging("Classe");
                    this._Classe = value;
                    this.SendPropertyChanged("Classe");
                    this.OnClasseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Anno in the schema.
        /// </summary>
        [Column(Name = @"anno", Storage = "_Anno", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int Anno
        {
            get
            {
                return this._Anno;
            }
            set
            {
                if (this._Anno != value)
                {
                    if (this._Campionati.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnnoChanging(value);
                    this.SendPropertyChanging("Anno");
                    this._Anno = value;
                    this.SendPropertyChanged("Anno");
                    this.OnAnnoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Pilota in the schema.
        /// </summary>
        [Column(Name = @"pilota", Storage = "_Pilota", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string Pilota
        {
            get
            {
                return this._Pilota;
            }
            set
            {
                if (this._Pilota != value)
                {
                    if (this._Piloti.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPilotaChanging(value);
                    this.SendPropertyChanging("Pilota");
                    this._Pilota = value;
                    this.SendPropertyChanged("Pilota");
                    this.OnPilotaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Eta in the schema.
        /// </summary>
        [Column(Name = @"eta", Storage = "_Eta", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Eta
        {
            get
            {
                return this._Eta;
            }
            set
            {
                if (this._Eta != value)
                {
                    this.OnEtaChanging(value);
                    this.SendPropertyChanging("Eta");
                    this._Eta = value;
                    this.SendPropertyChanged("Eta");
                    this.OnEtaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Esperienza in the schema.
        /// </summary>
        [Column(Name = @"esperienza", Storage = "_Esperienza", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Esperienza
        {
            get
            {
                return this._Esperienza;
            }
            set
            {
                if (this._Esperienza != value)
                {
                    this.OnEsperienzaChanging(value);
                    this.SendPropertyChanging("Esperienza");
                    this._Esperienza = value;
                    this.SendPropertyChanged("Esperienza");
                    this.OnEsperienzaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PuntiTotali in the schema.
        /// </summary>
        [Column(Name = @"puntiTotali", Storage = "_PuntiTotali", CanBeNull = false, DbType = "DOUBLE(10,1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double PuntiTotali
        {
            get
            {
                return this._PuntiTotali;
            }
            set
            {
                if (this._PuntiTotali != value)
                {
                    this.OnPuntiTotaliChanging(value);
                    this.SendPropertyChanging("PuntiTotali");
                    this._PuntiTotali = value;
                    this.SendPropertyChanged("PuntiTotali");
                    this.OnPuntiTotaliChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PuntiValidi in the schema.
        /// </summary>
        [Column(Name = @"puntiValidi", Storage = "_PuntiValidi", DbType = "DOUBLE(10,1) NULL", UpdateCheck = UpdateCheck.Never)]
        public double? PuntiValidi
        {
            get
            {
                return this._PuntiValidi;
            }
            set
            {
                if (this._PuntiValidi != value)
                {
                    this.OnPuntiValidiChanging(value);
                    this.SendPropertyChanging("PuntiValidi");
                    this._PuntiValidi = value;
                    this.SendPropertyChanged("PuntiValidi");
                    this.OnPuntiValidiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosizioneClassifica in the schema.
        /// </summary>
        [Column(Name = @"posizioneClassifica", Storage = "_PosizioneClassifica", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PosizioneClassifica
        {
            get
            {
                return this._PosizioneClassifica;
            }
            set
            {
                if (this._PosizioneClassifica != value)
                {
                    this.OnPosizioneClassificaChanging(value);
                    this.SendPropertyChanging("PosizioneClassifica");
                    this._PosizioneClassifica = value;
                    this.SendPropertyChanged("PosizioneClassifica");
                    this.OnPosizioneClassificaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Campionati in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Campionati_PartecipazioniPilota", Storage="_Campionati", ThisKey="Classe,Anno", OtherKey="Classe,Anno", IsForeignKey=true)]
        public Campionati Campionati
        {
            get
            {
                return this._Campionati.Entity;
            }
            set
            {
                Campionati previousValue = this._Campionati.Entity;
                if ((previousValue != value) || (this._Campionati.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Campionati");
                    if (previousValue != null)
                    {
                        this._Campionati.Entity = null;
                        previousValue.PartecipazioniPilota.Remove(this);
                    }
                    this._Campionati.Entity = value;
                    if (value != null)
                    {
                        this._Classe = value.Classe;
                        this._Anno = value.Anno;
                        value.PartecipazioniPilota.Add(this);
                    }
                    else
                    {
                        this._Classe = default(string);
                        this._Anno = default(int);
                    }
                    this.SendPropertyChanged("Campionati");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Piloti in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Piloti_PartecipazioniPilota", Storage="_Piloti", ThisKey="Pilota", OtherKey="IdPilota", IsForeignKey=true)]
        public Piloti Piloti
        {
            get
            {
                return this._Piloti.Entity;
            }
            set
            {
                Piloti previousValue = this._Piloti.Entity;
                if ((previousValue != value) || (this._Piloti.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Piloti");
                    if (previousValue != null)
                    {
                        this._Piloti.Entity = null;
                        previousValue.PartecipazioniPilota.Remove(this);
                    }
                    this._Piloti.Entity = value;
                    if (value != null)
                    {
                        this._Pilota = value.IdPilota;
                        value.PartecipazioniPilota.Add(this);
                    }
                    else
                    {
                        this._Pilota = default(string);
                    }
                    this.SendPropertyChanged("Piloti");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.PartecipazioniTeam in the schema.
    /// </summary>
    [Table(Name = @"datarace.partecipazioni_team")]
    public partial class PartecipazioniTeam : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Classe;

        private int _Anno;

        private string _Team;

        private int _Punti;

        private int _PosizioneClassifica;
        #pragma warning restore 0649

        private EntityRef<Campionati> _Campionati;

        private EntityRef<StagioniTeam> _StagioniTeam;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnClasseChanging(string value);
        partial void OnClasseChanged();
        partial void OnAnnoChanging(int value);
        partial void OnAnnoChanged();
        partial void OnTeamChanging(string value);
        partial void OnTeamChanged();
        partial void OnPuntiChanging(int value);
        partial void OnPuntiChanged();
        partial void OnPosizioneClassificaChanging(int value);
        partial void OnPosizioneClassificaChanged();
        #endregion

        public PartecipazioniTeam()
        {
            this._Campionati  = default(EntityRef<Campionati>);
            this._StagioniTeam  = default(EntityRef<StagioniTeam>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Classe in the schema.
        /// </summary>
        [Column(Name = @"classe", Storage = "_Classe", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string Classe
        {
            get
            {
                return this._Classe;
            }
            set
            {
                if (this._Classe != value)
                {
                    if (this._Campionati.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnClasseChanging(value);
                    this.SendPropertyChanging("Classe");
                    this._Classe = value;
                    this.SendPropertyChanged("Classe");
                    this.OnClasseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Anno in the schema.
        /// </summary>
        [Column(Name = @"anno", Storage = "_Anno", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int Anno
        {
            get
            {
                return this._Anno;
            }
            set
            {
                if (this._Anno != value)
                {
                    if (this._Campionati.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnnoChanging(value);
                    this.SendPropertyChanging("Anno");
                    this._Anno = value;
                    this.SendPropertyChanged("Anno");
                    this.OnAnnoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Team in the schema.
        /// </summary>
        [Column(Name = @"team", Storage = "_Team", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string Team
        {
            get
            {
                return this._Team;
            }
            set
            {
                if (this._Team != value)
                {
                    if (this._StagioniTeam.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTeamChanging(value);
                    this.SendPropertyChanging("Team");
                    this._Team = value;
                    this.SendPropertyChanged("Team");
                    this.OnTeamChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Punti in the schema.
        /// </summary>
        [Column(Name = @"punti", Storage = "_Punti", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Punti
        {
            get
            {
                return this._Punti;
            }
            set
            {
                if (this._Punti != value)
                {
                    this.OnPuntiChanging(value);
                    this.SendPropertyChanging("Punti");
                    this._Punti = value;
                    this.SendPropertyChanged("Punti");
                    this.OnPuntiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosizioneClassifica in the schema.
        /// </summary>
        [Column(Name = @"posizioneClassifica", Storage = "_PosizioneClassifica", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PosizioneClassifica
        {
            get
            {
                return this._PosizioneClassifica;
            }
            set
            {
                if (this._PosizioneClassifica != value)
                {
                    this.OnPosizioneClassificaChanging(value);
                    this.SendPropertyChanging("PosizioneClassifica");
                    this._PosizioneClassifica = value;
                    this.SendPropertyChanged("PosizioneClassifica");
                    this.OnPosizioneClassificaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Campionati in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Campionati_PartecipazioniTeam", Storage="_Campionati", ThisKey="Classe,Anno", OtherKey="Classe,Anno", IsForeignKey=true)]
        public Campionati Campionati
        {
            get
            {
                return this._Campionati.Entity;
            }
            set
            {
                Campionati previousValue = this._Campionati.Entity;
                if ((previousValue != value) || (this._Campionati.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Campionati");
                    if (previousValue != null)
                    {
                        this._Campionati.Entity = null;
                        previousValue.PartecipazioniTeam.Remove(this);
                    }
                    this._Campionati.Entity = value;
                    if (value != null)
                    {
                        this._Classe = value.Classe;
                        this._Anno = value.Anno;
                        value.PartecipazioniTeam.Add(this);
                    }
                    else
                    {
                        this._Classe = default(string);
                        this._Anno = default(int);
                    }
                    this.SendPropertyChanged("Campionati");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StagioniTeam in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StagioniTeam_PartecipazioniTeam", Storage="_StagioniTeam", ThisKey="Team", OtherKey="NomeUfficiale", IsForeignKey=true)]
        public StagioniTeam StagioniTeam
        {
            get
            {
                return this._StagioniTeam.Entity;
            }
            set
            {
                StagioniTeam previousValue = this._StagioniTeam.Entity;
                if ((previousValue != value) || (this._StagioniTeam.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("StagioniTeam");
                    if (previousValue != null)
                    {
                        this._StagioniTeam.Entity = null;
                        previousValue.PartecipazioniTeam.Remove(this);
                    }
                    this._StagioniTeam.Entity = value;
                    if (value != null)
                    {
                        this._Team = value.NomeUfficiale;
                        value.PartecipazioniTeam.Add(this);
                    }
                    else
                    {
                        this._Team = default(string);
                    }
                    this.SendPropertyChanged("StagioniTeam");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.Piloti in the schema.
    /// </summary>
    [Table(Name = @"datarace.piloti")]
    public partial class Piloti : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _IdPilota;

        private string _Nome;

        private string _Cognome;

        private string _LuogoDiNascita;

        private string _Nazionalita;

        private string _DataDiNascita;
        #pragma warning restore 0649

        private EntitySet<Iscrizioni> _Iscrizioni;

        private EntitySet<PartecipazioniPilota> _PartecipazioniPilota;

        private EntityRef<StatistichePiloti> _StatistichePiloti;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdPilotaChanging(string value);
        partial void OnIdPilotaChanged();
        partial void OnNomeChanging(string value);
        partial void OnNomeChanged();
        partial void OnCognomeChanging(string value);
        partial void OnCognomeChanged();
        partial void OnLuogoDiNascitaChanging(string value);
        partial void OnLuogoDiNascitaChanged();
        partial void OnNazionalitaChanging(string value);
        partial void OnNazionalitaChanged();
        partial void OnDataDiNascitaChanging(string value);
        partial void OnDataDiNascitaChanged();
        #endregion

        public Piloti()
        {
            this._Iscrizioni = new EntitySet<Iscrizioni>(new Action<Iscrizioni>(this.attach_Iscrizioni), new Action<Iscrizioni>(this.detach_Iscrizioni));
            this._PartecipazioniPilota = new EntitySet<PartecipazioniPilota>(new Action<PartecipazioniPilota>(this.attach_PartecipazioniPilota), new Action<PartecipazioniPilota>(this.detach_PartecipazioniPilota));
            this._StatistichePiloti  = default(EntityRef<StatistichePiloti>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdPilota in the schema.
        /// </summary>
        [Column(Name = @"idPilota", Storage = "_IdPilota", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string IdPilota
        {
            get
            {
                return this._IdPilota;
            }
            set
            {
                if (this._IdPilota != value)
                {
                    if (this._StatistichePiloti.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdPilotaChanging(value);
                    this.SendPropertyChanging("IdPilota");
                    this._IdPilota = value;
                    this.SendPropertyChanged("IdPilota");
                    this.OnIdPilotaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nome in the schema.
        /// </summary>
        [Column(Name = @"nome", Storage = "_Nome", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nome
        {
            get
            {
                return this._Nome;
            }
            set
            {
                if (this._Nome != value)
                {
                    this.OnNomeChanging(value);
                    this.SendPropertyChanging("Nome");
                    this._Nome = value;
                    this.SendPropertyChanged("Nome");
                    this.OnNomeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cognome in the schema.
        /// </summary>
        [Column(Name = @"cognome", Storage = "_Cognome", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Cognome
        {
            get
            {
                return this._Cognome;
            }
            set
            {
                if (this._Cognome != value)
                {
                    this.OnCognomeChanging(value);
                    this.SendPropertyChanging("Cognome");
                    this._Cognome = value;
                    this.SendPropertyChanged("Cognome");
                    this.OnCognomeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LuogoDiNascita in the schema.
        /// </summary>
        [Column(Name = @"luogoDiNascita", Storage = "_LuogoDiNascita", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string LuogoDiNascita
        {
            get
            {
                return this._LuogoDiNascita;
            }
            set
            {
                if (this._LuogoDiNascita != value)
                {
                    this.OnLuogoDiNascitaChanging(value);
                    this.SendPropertyChanging("LuogoDiNascita");
                    this._LuogoDiNascita = value;
                    this.SendPropertyChanged("LuogoDiNascita");
                    this.OnLuogoDiNascitaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nazionalita in the schema.
        /// </summary>
        [Column(Name = @"nazionalita", Storage = "_Nazionalita", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nazionalita
        {
            get
            {
                return this._Nazionalita;
            }
            set
            {
                if (this._Nazionalita != value)
                {
                    this.OnNazionalitaChanging(value);
                    this.SendPropertyChanging("Nazionalita");
                    this._Nazionalita = value;
                    this.SendPropertyChanged("Nazionalita");
                    this.OnNazionalitaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataDiNascita in the schema.
        /// </summary>
        [Column(Name = @"dataDiNascita", Storage = "_DataDiNascita", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DataDiNascita
        {
            get
            {
                return this._DataDiNascita;
            }
            set
            {
                if (this._DataDiNascita != value)
                {
                    this.OnDataDiNascitaChanging(value);
                    this.SendPropertyChanging("DataDiNascita");
                    this._DataDiNascita = value;
                    this.SendPropertyChanged("DataDiNascita");
                    this.OnDataDiNascitaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Iscrizioni in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Piloti_Iscrizioni", Storage="_Iscrizioni", ThisKey="IdPilota", OtherKey="Pilota", DeleteRule="NO ACTION")]
        public EntitySet<Iscrizioni> Iscrizioni
        {
            get
            {
                return this._Iscrizioni;
            }
            set
            {
                this._Iscrizioni.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PartecipazioniPilota in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Piloti_PartecipazioniPilota", Storage="_PartecipazioniPilota", ThisKey="IdPilota", OtherKey="Pilota", DeleteRule="NO ACTION")]
        public EntitySet<PartecipazioniPilota> PartecipazioniPilota
        {
            get
            {
                return this._PartecipazioniPilota;
            }
            set
            {
                this._PartecipazioniPilota.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for StatistichePiloti in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Piloti_StatistichePiloti", Storage="_StatistichePiloti", ThisKey="IdPilota", OtherKey="Pilota", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
        public StatistichePiloti StatistichePiloti
        {
            get
            {
                return this._StatistichePiloti.Entity;
            }
            set
            {
                StatistichePiloti previousValue = this._StatistichePiloti.Entity;
                if ((previousValue != value) || (this._StatistichePiloti.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("StatistichePiloti");
                    if (previousValue != null)
                    {
                        this._StatistichePiloti.Entity = null;
                        previousValue.Piloti = null;
                    }
                    this._StatistichePiloti.Entity = value;
                    if (value != null)
                    {
                        value.Piloti = this;
                    }
                    this.SendPropertyChanged("StatistichePiloti");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Iscrizioni(Iscrizioni entity)
        {
            this.SendPropertyChanging("Iscrizioni");
            entity.Piloti = this;
        }
    
        private void detach_Iscrizioni(Iscrizioni entity)
        {
            this.SendPropertyChanging("Iscrizioni");
            entity.Piloti = null;
        }

        private void attach_PartecipazioniPilota(PartecipazioniPilota entity)
        {
            this.SendPropertyChanging("PartecipazioniPilota");
            entity.Piloti = this;
        }
    
        private void detach_PartecipazioniPilota(PartecipazioniPilota entity)
        {
            this.SendPropertyChanging("PartecipazioniPilota");
            entity.Piloti = null;
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.Prove in the schema.
    /// </summary>
    [Table(Name = @"datarace.prove")]
    public partial class Prove : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Anno;

        private int _PosizioneCalendario;

        private string _GranPremio;

        private string _NomeUfficiale;

        private int _NumeroEdizione;

        private System.DateTime _DataInizio;

        private System.DateTime _DataFine;

        private int? _NumeroSpettatori;

        private string _Circuito;
        #pragma warning restore 0649

        private EntitySet<Gare> _Gare;

        private EntitySet<Iscrizioni> _Iscrizioni;

        private EntityRef<Stagioni> _Stagioni;

        private EntityRef<GranPremi> _GranPremi;

        private EntityRef<Circuiti> _Circuiti;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAnnoChanging(int value);
        partial void OnAnnoChanged();
        partial void OnPosizioneCalendarioChanging(int value);
        partial void OnPosizioneCalendarioChanged();
        partial void OnGranPremioChanging(string value);
        partial void OnGranPremioChanged();
        partial void OnNomeUfficialeChanging(string value);
        partial void OnNomeUfficialeChanged();
        partial void OnNumeroEdizioneChanging(int value);
        partial void OnNumeroEdizioneChanged();
        partial void OnDataInizioChanging(System.DateTime value);
        partial void OnDataInizioChanged();
        partial void OnDataFineChanging(System.DateTime value);
        partial void OnDataFineChanged();
        partial void OnNumeroSpettatoriChanging(int? value);
        partial void OnNumeroSpettatoriChanged();
        partial void OnCircuitoChanging(string value);
        partial void OnCircuitoChanged();
        #endregion

        public Prove()
        {
            this._Gare = new EntitySet<Gare>(new Action<Gare>(this.attach_Gare), new Action<Gare>(this.detach_Gare));
            this._Iscrizioni = new EntitySet<Iscrizioni>(new Action<Iscrizioni>(this.attach_Iscrizioni), new Action<Iscrizioni>(this.detach_Iscrizioni));
            this._Stagioni  = default(EntityRef<Stagioni>);
            this._GranPremi  = default(EntityRef<GranPremi>);
            this._Circuiti  = default(EntityRef<Circuiti>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Anno in the schema.
        /// </summary>
        [Column(Name = @"anno", Storage = "_Anno", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int Anno
        {
            get
            {
                return this._Anno;
            }
            set
            {
                if (this._Anno != value)
                {
                    if (this._Stagioni.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnnoChanging(value);
                    this.SendPropertyChanging("Anno");
                    this._Anno = value;
                    this.SendPropertyChanged("Anno");
                    this.OnAnnoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosizioneCalendario in the schema.
        /// </summary>
        [Column(Name = @"posizioneCalendario", Storage = "_PosizioneCalendario", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int PosizioneCalendario
        {
            get
            {
                return this._PosizioneCalendario;
            }
            set
            {
                if (this._PosizioneCalendario != value)
                {
                    this.OnPosizioneCalendarioChanging(value);
                    this.SendPropertyChanging("PosizioneCalendario");
                    this._PosizioneCalendario = value;
                    this.SendPropertyChanged("PosizioneCalendario");
                    this.OnPosizioneCalendarioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GranPremio in the schema.
        /// </summary>
        [Column(Name = @"granPremio", Storage = "_GranPremio", CanBeNull = false, DbType = "CHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string GranPremio
        {
            get
            {
                return this._GranPremio;
            }
            set
            {
                if (this._GranPremio != value)
                {
                    if (this._GranPremi.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnGranPremioChanging(value);
                    this.SendPropertyChanging("GranPremio");
                    this._GranPremio = value;
                    this.SendPropertyChanged("GranPremio");
                    this.OnGranPremioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NomeUfficiale in the schema.
        /// </summary>
        [Column(Name = @"nomeUfficiale", Storage = "_NomeUfficiale", CanBeNull = false, DbType = "CHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NomeUfficiale
        {
            get
            {
                return this._NomeUfficiale;
            }
            set
            {
                if (this._NomeUfficiale != value)
                {
                    this.OnNomeUfficialeChanging(value);
                    this.SendPropertyChanging("NomeUfficiale");
                    this._NomeUfficiale = value;
                    this.SendPropertyChanged("NomeUfficiale");
                    this.OnNomeUfficialeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumeroEdizione in the schema.
        /// </summary>
        [Column(Name = @"numeroEdizione", Storage = "_NumeroEdizione", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int NumeroEdizione
        {
            get
            {
                return this._NumeroEdizione;
            }
            set
            {
                if (this._NumeroEdizione != value)
                {
                    this.OnNumeroEdizioneChanging(value);
                    this.SendPropertyChanging("NumeroEdizione");
                    this._NumeroEdizione = value;
                    this.SendPropertyChanged("NumeroEdizione");
                    this.OnNumeroEdizioneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataInizio in the schema.
        /// </summary>
        [Column(Name = @"dataInizio", Storage = "_DataInizio", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DataInizio
        {
            get
            {
                return this._DataInizio;
            }
            set
            {
                if (this._DataInizio != value)
                {
                    this.OnDataInizioChanging(value);
                    this.SendPropertyChanging("DataInizio");
                    this._DataInizio = value;
                    this.SendPropertyChanged("DataInizio");
                    this.OnDataInizioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DataFine in the schema.
        /// </summary>
        [Column(Name = @"dataFine", Storage = "_DataFine", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime DataFine
        {
            get
            {
                return this._DataFine;
            }
            set
            {
                if (this._DataFine != value)
                {
                    this.OnDataFineChanging(value);
                    this.SendPropertyChanging("DataFine");
                    this._DataFine = value;
                    this.SendPropertyChanged("DataFine");
                    this.OnDataFineChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumeroSpettatori in the schema.
        /// </summary>
        [Column(Name = @"numeroSpettatori", Storage = "_NumeroSpettatori", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? NumeroSpettatori
        {
            get
            {
                return this._NumeroSpettatori;
            }
            set
            {
                if (this._NumeroSpettatori != value)
                {
                    this.OnNumeroSpettatoriChanging(value);
                    this.SendPropertyChanging("NumeroSpettatori");
                    this._NumeroSpettatori = value;
                    this.SendPropertyChanged("NumeroSpettatori");
                    this.OnNumeroSpettatoriChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Circuito in the schema.
        /// </summary>
        [Column(Name = @"circuito", Storage = "_Circuito", CanBeNull = false, DbType = "CHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Circuito
        {
            get
            {
                return this._Circuito;
            }
            set
            {
                if (this._Circuito != value)
                {
                    if (this._Circuiti.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCircuitoChanging(value);
                    this.SendPropertyChanging("Circuito");
                    this._Circuito = value;
                    this.SendPropertyChanged("Circuito");
                    this.OnCircuitoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Gare in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Prove_Gare", Storage="_Gare", ThisKey="Anno,PosizioneCalendario", OtherKey="PosizioneCalendario,Anno", DeleteRule="NO ACTION")]
        public EntitySet<Gare> Gare
        {
            get
            {
                return this._Gare;
            }
            set
            {
                this._Gare.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Iscrizioni in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Prove_Iscrizioni", Storage="_Iscrizioni", ThisKey="Anno,PosizioneCalendario", OtherKey="PosizioneCalendario,Anno", DeleteRule="NO ACTION")]
        public EntitySet<Iscrizioni> Iscrizioni
        {
            get
            {
                return this._Iscrizioni;
            }
            set
            {
                this._Iscrizioni.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Stagioni in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stagioni_Prove", Storage="_Stagioni", ThisKey="Anno", OtherKey="Anno", IsForeignKey=true)]
        public Stagioni Stagioni
        {
            get
            {
                return this._Stagioni.Entity;
            }
            set
            {
                Stagioni previousValue = this._Stagioni.Entity;
                if ((previousValue != value) || (this._Stagioni.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Stagioni");
                    if (previousValue != null)
                    {
                        this._Stagioni.Entity = null;
                        previousValue.Prove.Remove(this);
                    }
                    this._Stagioni.Entity = value;
                    if (value != null)
                    {
                        this._Anno = value.Anno;
                        value.Prove.Add(this);
                    }
                    else
                    {
                        this._Anno = default(int);
                    }
                    this.SendPropertyChanged("Stagioni");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GranPremi in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="GranPremi_Prove", Storage="_GranPremi", ThisKey="GranPremio", OtherKey="IdGranPremio", IsForeignKey=true)]
        public GranPremi GranPremi
        {
            get
            {
                return this._GranPremi.Entity;
            }
            set
            {
                GranPremi previousValue = this._GranPremi.Entity;
                if ((previousValue != value) || (this._GranPremi.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("GranPremi");
                    if (previousValue != null)
                    {
                        this._GranPremi.Entity = null;
                        previousValue.Prove.Remove(this);
                    }
                    this._GranPremi.Entity = value;
                    if (value != null)
                    {
                        this._GranPremio = value.IdGranPremio;
                        value.Prove.Add(this);
                    }
                    else
                    {
                        this._GranPremio = default(string);
                    }
                    this.SendPropertyChanged("GranPremi");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Circuiti in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Circuiti_Prove", Storage="_Circuiti", ThisKey="Circuito", OtherKey="IdCircuito", IsForeignKey=true)]
        public Circuiti Circuiti
        {
            get
            {
                return this._Circuiti.Entity;
            }
            set
            {
                Circuiti previousValue = this._Circuiti.Entity;
                if ((previousValue != value) || (this._Circuiti.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Circuiti");
                    if (previousValue != null)
                    {
                        this._Circuiti.Entity = null;
                        previousValue.Prove.Remove(this);
                    }
                    this._Circuiti.Entity = value;
                    if (value != null)
                    {
                        this._Circuito = value.IdCircuito;
                        value.Prove.Add(this);
                    }
                    else
                    {
                        this._Circuito = default(string);
                    }
                    this.SendPropertyChanged("Circuiti");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Gare(Gare entity)
        {
            this.SendPropertyChanging("Gare");
            entity.Prove = this;
        }
    
        private void detach_Gare(Gare entity)
        {
            this.SendPropertyChanging("Gare");
            entity.Prove = null;
        }

        private void attach_Iscrizioni(Iscrizioni entity)
        {
            this.SendPropertyChanging("Iscrizioni");
            entity.Prove = this;
        }
    
        private void detach_Iscrizioni(Iscrizioni entity)
        {
            this.SendPropertyChanging("Iscrizioni");
            entity.Prove = null;
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.Punteggi in the schema.
    /// </summary>
    [Table(Name = @"datarace.punteggi")]
    public partial class Punteggi : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _IdPunteggio;

        private int _Risultato;

        private int _PuntiAssegnati;
        #pragma warning restore 0649

        private EntitySet<Campionati> _Campionati;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdPunteggioChanging(string value);
        partial void OnIdPunteggioChanged();
        partial void OnRisultatoChanging(int value);
        partial void OnRisultatoChanged();
        partial void OnPuntiAssegnatiChanging(int value);
        partial void OnPuntiAssegnatiChanged();
        #endregion

        public Punteggi()
        {
            this._Campionati = new EntitySet<Campionati>(new Action<Campionati>(this.attach_Campionati), new Action<Campionati>(this.detach_Campionati));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdPunteggio in the schema.
        /// </summary>
        [Column(Name = @"idPunteggio", Storage = "_IdPunteggio", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string IdPunteggio
        {
            get
            {
                return this._IdPunteggio;
            }
            set
            {
                if (this._IdPunteggio != value)
                {
                    this.OnIdPunteggioChanging(value);
                    this.SendPropertyChanging("IdPunteggio");
                    this._IdPunteggio = value;
                    this.SendPropertyChanged("IdPunteggio");
                    this.OnIdPunteggioChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Risultato in the schema.
        /// </summary>
        [Column(Name = @"risultato", Storage = "_Risultato", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int Risultato
        {
            get
            {
                return this._Risultato;
            }
            set
            {
                if (this._Risultato != value)
                {
                    this.OnRisultatoChanging(value);
                    this.SendPropertyChanging("Risultato");
                    this._Risultato = value;
                    this.SendPropertyChanged("Risultato");
                    this.OnRisultatoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PuntiAssegnati in the schema.
        /// </summary>
        [Column(Name = @"puntiAssegnati", Storage = "_PuntiAssegnati", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PuntiAssegnati
        {
            get
            {
                return this._PuntiAssegnati;
            }
            set
            {
                if (this._PuntiAssegnati != value)
                {
                    this.OnPuntiAssegnatiChanging(value);
                    this.SendPropertyChanging("PuntiAssegnati");
                    this._PuntiAssegnati = value;
                    this.SendPropertyChanged("PuntiAssegnati");
                    this.OnPuntiAssegnatiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Campionati in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Punteggi_Campionati", Storage="_Campionati", ThisKey="IdPunteggio", OtherKey="Punteggio", DeleteRule="NO ACTION")]
        public EntitySet<Campionati> Campionati
        {
            get
            {
                return this._Campionati;
            }
            set
            {
                this._Campionati.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Campionati(Campionati entity)
        {
            this.SendPropertyChanging("Campionati");
            entity.Punteggi = this;
        }
    
        private void detach_Campionati(Campionati entity)
        {
            this.SendPropertyChanging("Campionati");
            entity.Punteggi = null;
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.Risultati in the schema.
    /// </summary>
    [Table(Name = @"datarace.risultati")]
    public partial class Risultati : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _IdRisultato;

        private string _Gara;

        private string _PosizionePartenza;

        private int _PosizioneArrivo;

        private bool _Ritiro;

        private System.TimeSpan _TempoTotale;

        private System.TimeSpan _GiroVeloce;

        private int? _GiriInTesta;
        #pragma warning restore 0649

        private EntitySet<Iscrizioni> _Iscrizioni;

        private EntityRef<Gare> _Gare;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdRisultatoChanging(string value);
        partial void OnIdRisultatoChanged();
        partial void OnGaraChanging(string value);
        partial void OnGaraChanged();
        partial void OnPosizionePartenzaChanging(string value);
        partial void OnPosizionePartenzaChanged();
        partial void OnPosizioneArrivoChanging(int value);
        partial void OnPosizioneArrivoChanged();
        partial void OnRitiroChanging(bool value);
        partial void OnRitiroChanged();
        partial void OnTempoTotaleChanging(System.TimeSpan value);
        partial void OnTempoTotaleChanged();
        partial void OnGiroVeloceChanging(System.TimeSpan value);
        partial void OnGiroVeloceChanged();
        partial void OnGiriInTestaChanging(int? value);
        partial void OnGiriInTestaChanged();
        #endregion

        public Risultati()
        {
            this._Iscrizioni = new EntitySet<Iscrizioni>(new Action<Iscrizioni>(this.attach_Iscrizioni), new Action<Iscrizioni>(this.detach_Iscrizioni));
            this._Gare  = default(EntityRef<Gare>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdRisultato in the schema.
        /// </summary>
        [Column(Name = @"idRisultato", Storage = "_IdRisultato", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string IdRisultato
        {
            get
            {
                return this._IdRisultato;
            }
            set
            {
                if (this._IdRisultato != value)
                {
                    this.OnIdRisultatoChanging(value);
                    this.SendPropertyChanging("IdRisultato");
                    this._IdRisultato = value;
                    this.SendPropertyChanged("IdRisultato");
                    this.OnIdRisultatoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Gara in the schema.
        /// </summary>
        [Column(Name = @"gara", Storage = "_Gara", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Gara
        {
            get
            {
                return this._Gara;
            }
            set
            {
                if (this._Gara != value)
                {
                    if (this._Gare.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnGaraChanging(value);
                    this.SendPropertyChanging("Gara");
                    this._Gara = value;
                    this.SendPropertyChanged("Gara");
                    this.OnGaraChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosizionePartenza in the schema.
        /// </summary>
        [Column(Name = @"posizionePartenza", Storage = "_PosizionePartenza", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PosizionePartenza
        {
            get
            {
                return this._PosizionePartenza;
            }
            set
            {
                if (this._PosizionePartenza != value)
                {
                    this.OnPosizionePartenzaChanging(value);
                    this.SendPropertyChanging("PosizionePartenza");
                    this._PosizionePartenza = value;
                    this.SendPropertyChanged("PosizionePartenza");
                    this.OnPosizionePartenzaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosizioneArrivo in the schema.
        /// </summary>
        [Column(Name = @"posizioneArrivo", Storage = "_PosizioneArrivo", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PosizioneArrivo
        {
            get
            {
                return this._PosizioneArrivo;
            }
            set
            {
                if (this._PosizioneArrivo != value)
                {
                    this.OnPosizioneArrivoChanging(value);
                    this.SendPropertyChanging("PosizioneArrivo");
                    this._PosizioneArrivo = value;
                    this.SendPropertyChanged("PosizioneArrivo");
                    this.OnPosizioneArrivoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ritiro in the schema.
        /// </summary>
        [Column(Name = @"ritiro", Storage = "_Ritiro", CanBeNull = false, DbType = "TINYINT(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Ritiro
        {
            get
            {
                return this._Ritiro;
            }
            set
            {
                if (this._Ritiro != value)
                {
                    this.OnRitiroChanging(value);
                    this.SendPropertyChanging("Ritiro");
                    this._Ritiro = value;
                    this.SendPropertyChanged("Ritiro");
                    this.OnRitiroChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TempoTotale in the schema.
        /// </summary>
        [Column(Name = @"tempoTotale", Storage = "_TempoTotale", CanBeNull = false, DbType = "TIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.TimeSpan TempoTotale
        {
            get
            {
                return this._TempoTotale;
            }
            set
            {
                if (this._TempoTotale != value)
                {
                    this.OnTempoTotaleChanging(value);
                    this.SendPropertyChanging("TempoTotale");
                    this._TempoTotale = value;
                    this.SendPropertyChanged("TempoTotale");
                    this.OnTempoTotaleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GiroVeloce in the schema.
        /// </summary>
        [Column(Name = @"giroVeloce", Storage = "_GiroVeloce", CanBeNull = false, DbType = "TIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.TimeSpan GiroVeloce
        {
            get
            {
                return this._GiroVeloce;
            }
            set
            {
                if (this._GiroVeloce != value)
                {
                    this.OnGiroVeloceChanging(value);
                    this.SendPropertyChanging("GiroVeloce");
                    this._GiroVeloce = value;
                    this.SendPropertyChanged("GiroVeloce");
                    this.OnGiroVeloceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GiriInTesta in the schema.
        /// </summary>
        [Column(Name = @"giriInTesta", Storage = "_GiriInTesta", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? GiriInTesta
        {
            get
            {
                return this._GiriInTesta;
            }
            set
            {
                if (this._GiriInTesta != value)
                {
                    this.OnGiriInTestaChanging(value);
                    this.SendPropertyChanging("GiriInTesta");
                    this._GiriInTesta = value;
                    this.SendPropertyChanged("GiriInTesta");
                    this.OnGiriInTestaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Iscrizioni in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Risultati_Iscrizioni", Storage="_Iscrizioni", ThisKey="IdRisultato", OtherKey="Risultato", DeleteRule="NO ACTION")]
        public EntitySet<Iscrizioni> Iscrizioni
        {
            get
            {
                return this._Iscrizioni;
            }
            set
            {
                this._Iscrizioni.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Gare in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Gare_Risultati", Storage="_Gare", ThisKey="Gara", OtherKey="IdGara", IsForeignKey=true)]
        public Gare Gare
        {
            get
            {
                return this._Gare.Entity;
            }
            set
            {
                Gare previousValue = this._Gare.Entity;
                if ((previousValue != value) || (this._Gare.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Gare");
                    if (previousValue != null)
                    {
                        this._Gare.Entity = null;
                        previousValue.Risultati.Remove(this);
                    }
                    this._Gare.Entity = value;
                    if (value != null)
                    {
                        this._Gara = value.IdGara;
                        value.Risultati.Add(this);
                    }
                    else
                    {
                        this._Gara = default(string);
                    }
                    this.SendPropertyChanged("Gare");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Iscrizioni(Iscrizioni entity)
        {
            this.SendPropertyChanging("Iscrizioni");
            entity.Risultati = this;
        }
    
        private void detach_Iscrizioni(Iscrizioni entity)
        {
            this.SendPropertyChanging("Iscrizioni");
            entity.Risultati = null;
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.Stagioni in the schema.
    /// </summary>
    [Table(Name = @"datarace.stagioni")]
    public partial class Stagioni : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Anno;

        private int _NumeroProve;
        #pragma warning restore 0649

        private EntitySet<Campionati> _Campionati;

        private EntitySet<Prove> _Prove;

        private EntitySet<StagioniTeam> _StagioniTeam;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAnnoChanging(int value);
        partial void OnAnnoChanged();
        partial void OnNumeroProveChanging(int value);
        partial void OnNumeroProveChanged();
        #endregion

        public Stagioni()
        {
            this._Campionati = new EntitySet<Campionati>(new Action<Campionati>(this.attach_Campionati), new Action<Campionati>(this.detach_Campionati));
            this._Prove = new EntitySet<Prove>(new Action<Prove>(this.attach_Prove), new Action<Prove>(this.detach_Prove));
            this._StagioniTeam = new EntitySet<StagioniTeam>(new Action<StagioniTeam>(this.attach_StagioniTeam), new Action<StagioniTeam>(this.detach_StagioniTeam));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Anno in the schema.
        /// </summary>
        [Column(Name = @"anno", Storage = "_Anno", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int Anno
        {
            get
            {
                return this._Anno;
            }
            set
            {
                if (this._Anno != value)
                {
                    this.OnAnnoChanging(value);
                    this.SendPropertyChanging("Anno");
                    this._Anno = value;
                    this.SendPropertyChanged("Anno");
                    this.OnAnnoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumeroProve in the schema.
        /// </summary>
        [Column(Name = @"numeroProve", Storage = "_NumeroProve", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int NumeroProve
        {
            get
            {
                return this._NumeroProve;
            }
            set
            {
                if (this._NumeroProve != value)
                {
                    this.OnNumeroProveChanging(value);
                    this.SendPropertyChanging("NumeroProve");
                    this._NumeroProve = value;
                    this.SendPropertyChanged("NumeroProve");
                    this.OnNumeroProveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Campionati in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stagioni_Campionati", Storage="_Campionati", ThisKey="Anno", OtherKey="Anno", DeleteRule="NO ACTION")]
        public EntitySet<Campionati> Campionati
        {
            get
            {
                return this._Campionati;
            }
            set
            {
                this._Campionati.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Prove in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stagioni_Prove", Storage="_Prove", ThisKey="Anno", OtherKey="Anno", DeleteRule="NO ACTION")]
        public EntitySet<Prove> Prove
        {
            get
            {
                return this._Prove;
            }
            set
            {
                this._Prove.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for StagioniTeam in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stagioni_StagioniTeam", Storage="_StagioniTeam", ThisKey="Anno", OtherKey="Anno", DeleteRule="NO ACTION")]
        public EntitySet<StagioniTeam> StagioniTeam
        {
            get
            {
                return this._StagioniTeam;
            }
            set
            {
                this._StagioniTeam.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Campionati(Campionati entity)
        {
            this.SendPropertyChanging("Campionati");
            entity.Stagioni = this;
        }
    
        private void detach_Campionati(Campionati entity)
        {
            this.SendPropertyChanging("Campionati");
            entity.Stagioni = null;
        }

        private void attach_Prove(Prove entity)
        {
            this.SendPropertyChanging("Prove");
            entity.Stagioni = this;
        }
    
        private void detach_Prove(Prove entity)
        {
            this.SendPropertyChanging("Prove");
            entity.Stagioni = null;
        }

        private void attach_StagioniTeam(StagioniTeam entity)
        {
            this.SendPropertyChanging("StagioniTeam");
            entity.Stagioni = this;
        }
    
        private void detach_StagioniTeam(StagioniTeam entity)
        {
            this.SendPropertyChanging("StagioniTeam");
            entity.Stagioni = null;
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.StagioniTeam in the schema.
    /// </summary>
    [Table(Name = @"datarace.stagioni_team")]
    public partial class StagioniTeam : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _NomeUfficiale;

        private int _Anno;

        private string _Team;

        private string _TeamManager;
        #pragma warning restore 0649

        private EntitySet<Iscrizioni> _Iscrizioni;

        private EntitySet<PartecipazioniTeam> _PartecipazioniTeam;

        private EntityRef<Stagioni> _Stagioni;

        private EntityRef<Team> _Team1;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnNomeUfficialeChanging(string value);
        partial void OnNomeUfficialeChanged();
        partial void OnAnnoChanging(int value);
        partial void OnAnnoChanged();
        partial void OnTeamChanging(string value);
        partial void OnTeamChanged();
        partial void OnTeamManagerChanging(string value);
        partial void OnTeamManagerChanged();
        #endregion

        public StagioniTeam()
        {
            this._Iscrizioni = new EntitySet<Iscrizioni>(new Action<Iscrizioni>(this.attach_Iscrizioni), new Action<Iscrizioni>(this.detach_Iscrizioni));
            this._PartecipazioniTeam = new EntitySet<PartecipazioniTeam>(new Action<PartecipazioniTeam>(this.attach_PartecipazioniTeam), new Action<PartecipazioniTeam>(this.detach_PartecipazioniTeam));
            this._Stagioni  = default(EntityRef<Stagioni>);
            this._Team1  = default(EntityRef<Team>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for NomeUfficiale in the schema.
        /// </summary>
        [Column(Name = @"nomeUfficiale", Storage = "_NomeUfficiale", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string NomeUfficiale
        {
            get
            {
                return this._NomeUfficiale;
            }
            set
            {
                if (this._NomeUfficiale != value)
                {
                    this.OnNomeUfficialeChanging(value);
                    this.SendPropertyChanging("NomeUfficiale");
                    this._NomeUfficiale = value;
                    this.SendPropertyChanged("NomeUfficiale");
                    this.OnNomeUfficialeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Anno in the schema.
        /// </summary>
        [Column(Name = @"anno", Storage = "_Anno", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int Anno
        {
            get
            {
                return this._Anno;
            }
            set
            {
                if (this._Anno != value)
                {
                    if (this._Stagioni.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnAnnoChanging(value);
                    this.SendPropertyChanging("Anno");
                    this._Anno = value;
                    this.SendPropertyChanged("Anno");
                    this.OnAnnoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Team in the schema.
        /// </summary>
        [Column(Name = @"team", Storage = "_Team", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Team
        {
            get
            {
                return this._Team;
            }
            set
            {
                if (this._Team != value)
                {
                    if (this._Team1.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTeamChanging(value);
                    this.SendPropertyChanging("Team");
                    this._Team = value;
                    this.SendPropertyChanged("Team");
                    this.OnTeamChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TeamManager in the schema.
        /// </summary>
        [Column(Name = @"teamManager", Storage = "_TeamManager", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TeamManager
        {
            get
            {
                return this._TeamManager;
            }
            set
            {
                if (this._TeamManager != value)
                {
                    this.OnTeamManagerChanging(value);
                    this.SendPropertyChanging("TeamManager");
                    this._TeamManager = value;
                    this.SendPropertyChanged("TeamManager");
                    this.OnTeamManagerChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Iscrizioni in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StagioniTeam_Iscrizioni", Storage="_Iscrizioni", ThisKey="NomeUfficiale", OtherKey="Team", DeleteRule="NO ACTION")]
        public EntitySet<Iscrizioni> Iscrizioni
        {
            get
            {
                return this._Iscrizioni;
            }
            set
            {
                this._Iscrizioni.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for PartecipazioniTeam in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="StagioniTeam_PartecipazioniTeam", Storage="_PartecipazioniTeam", ThisKey="NomeUfficiale", OtherKey="Team", DeleteRule="NO ACTION")]
        public EntitySet<PartecipazioniTeam> PartecipazioniTeam
        {
            get
            {
                return this._PartecipazioniTeam;
            }
            set
            {
                this._PartecipazioniTeam.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Stagioni in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Stagioni_StagioniTeam", Storage="_Stagioni", ThisKey="Anno", OtherKey="Anno", IsForeignKey=true)]
        public Stagioni Stagioni
        {
            get
            {
                return this._Stagioni.Entity;
            }
            set
            {
                Stagioni previousValue = this._Stagioni.Entity;
                if ((previousValue != value) || (this._Stagioni.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Stagioni");
                    if (previousValue != null)
                    {
                        this._Stagioni.Entity = null;
                        previousValue.StagioniTeam.Remove(this);
                    }
                    this._Stagioni.Entity = value;
                    if (value != null)
                    {
                        this._Anno = value.Anno;
                        value.StagioniTeam.Add(this);
                    }
                    else
                    {
                        this._Anno = default(int);
                    }
                    this.SendPropertyChanged("Stagioni");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Team1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Team_StagioniTeam", Storage="_Team1", ThisKey="Team", OtherKey="IdTeam", IsForeignKey=true)]
        public Team Team1
        {
            get
            {
                return this._Team1.Entity;
            }
            set
            {
                Team previousValue = this._Team1.Entity;
                if ((previousValue != value) || (this._Team1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Team1");
                    if (previousValue != null)
                    {
                        this._Team1.Entity = null;
                        previousValue.StagioniTeam.Remove(this);
                    }
                    this._Team1.Entity = value;
                    if (value != null)
                    {
                        this._Team = value.IdTeam;
                        value.StagioniTeam.Add(this);
                    }
                    else
                    {
                        this._Team = default(string);
                    }
                    this.SendPropertyChanged("Team1");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Iscrizioni(Iscrizioni entity)
        {
            this.SendPropertyChanging("Iscrizioni");
            entity.StagioniTeam = this;
        }
    
        private void detach_Iscrizioni(Iscrizioni entity)
        {
            this.SendPropertyChanging("Iscrizioni");
            entity.StagioniTeam = null;
        }

        private void attach_PartecipazioniTeam(PartecipazioniTeam entity)
        {
            this.SendPropertyChanging("PartecipazioniTeam");
            entity.StagioniTeam = this;
        }
    
        private void detach_PartecipazioniTeam(PartecipazioniTeam entity)
        {
            this.SendPropertyChanging("PartecipazioniTeam");
            entity.StagioniTeam = null;
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.StatistichePiloti in the schema.
    /// </summary>
    [Table(Name = @"datarace.statistiche_piloti")]
    public partial class StatistichePiloti : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Pilota;

        private int _GareDisputate;

        private int _Vittorie;

        private int _PolePositions;

        private int _Podi;

        private int _GiriVeloci;

        private int? _MondialiVinti;
        #pragma warning restore 0649

        private EntityRef<Piloti> _Piloti;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPilotaChanging(string value);
        partial void OnPilotaChanged();
        partial void OnGareDisputateChanging(int value);
        partial void OnGareDisputateChanged();
        partial void OnVittorieChanging(int value);
        partial void OnVittorieChanged();
        partial void OnPolePositionsChanging(int value);
        partial void OnPolePositionsChanged();
        partial void OnPodiChanging(int value);
        partial void OnPodiChanged();
        partial void OnGiriVelociChanging(int value);
        partial void OnGiriVelociChanged();
        partial void OnMondialiVintiChanging(int? value);
        partial void OnMondialiVintiChanged();
        #endregion

        public StatistichePiloti()
        {
            this._Piloti  = default(EntityRef<Piloti>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Pilota in the schema.
        /// </summary>
        [Column(Name = @"pilota", Storage = "_Pilota", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string Pilota
        {
            get
            {
                return this._Pilota;
            }
            set
            {
                if (this._Pilota != value)
                {
                    if (this._Piloti.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPilotaChanging(value);
                    this.SendPropertyChanging("Pilota");
                    this._Pilota = value;
                    this.SendPropertyChanged("Pilota");
                    this.OnPilotaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GareDisputate in the schema.
        /// </summary>
        [Column(Name = @"gareDisputate", Storage = "_GareDisputate", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int GareDisputate
        {
            get
            {
                return this._GareDisputate;
            }
            set
            {
                if (this._GareDisputate != value)
                {
                    this.OnGareDisputateChanging(value);
                    this.SendPropertyChanging("GareDisputate");
                    this._GareDisputate = value;
                    this.SendPropertyChanged("GareDisputate");
                    this.OnGareDisputateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Vittorie in the schema.
        /// </summary>
        [Column(Name = @"vittorie", Storage = "_Vittorie", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Vittorie
        {
            get
            {
                return this._Vittorie;
            }
            set
            {
                if (this._Vittorie != value)
                {
                    this.OnVittorieChanging(value);
                    this.SendPropertyChanging("Vittorie");
                    this._Vittorie = value;
                    this.SendPropertyChanged("Vittorie");
                    this.OnVittorieChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PolePositions in the schema.
        /// </summary>
        [Column(Name = @"polePositions", Storage = "_PolePositions", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PolePositions
        {
            get
            {
                return this._PolePositions;
            }
            set
            {
                if (this._PolePositions != value)
                {
                    this.OnPolePositionsChanging(value);
                    this.SendPropertyChanging("PolePositions");
                    this._PolePositions = value;
                    this.SendPropertyChanged("PolePositions");
                    this.OnPolePositionsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Podi in the schema.
        /// </summary>
        [Column(Name = @"podi", Storage = "_Podi", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Podi
        {
            get
            {
                return this._Podi;
            }
            set
            {
                if (this._Podi != value)
                {
                    this.OnPodiChanging(value);
                    this.SendPropertyChanging("Podi");
                    this._Podi = value;
                    this.SendPropertyChanged("Podi");
                    this.OnPodiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GiriVeloci in the schema.
        /// </summary>
        [Column(Name = @"giriVeloci", Storage = "_GiriVeloci", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int GiriVeloci
        {
            get
            {
                return this._GiriVeloci;
            }
            set
            {
                if (this._GiriVeloci != value)
                {
                    this.OnGiriVelociChanging(value);
                    this.SendPropertyChanging("GiriVeloci");
                    this._GiriVeloci = value;
                    this.SendPropertyChanged("GiriVeloci");
                    this.OnGiriVelociChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MondialiVinti in the schema.
        /// </summary>
        [Column(Name = @"mondialiVinti", Storage = "_MondialiVinti", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? MondialiVinti
        {
            get
            {
                return this._MondialiVinti;
            }
            set
            {
                if (this._MondialiVinti != value)
                {
                    this.OnMondialiVintiChanging(value);
                    this.SendPropertyChanging("MondialiVinti");
                    this._MondialiVinti = value;
                    this.SendPropertyChanged("MondialiVinti");
                    this.OnMondialiVintiChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Piloti in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Piloti_StatistichePiloti", Storage="_Piloti", ThisKey="Pilota", OtherKey="IdPilota", IsForeignKey=true)]
        public Piloti Piloti
        {
            get
            {
                return this._Piloti.Entity;
            }
            set
            {
                Piloti previousValue = this._Piloti.Entity;
                if ((previousValue != value) || (this._Piloti.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Piloti");
                    if (previousValue != null)
                    {
                        this._Piloti.Entity = null;
                        previousValue.StatistichePiloti = null;
                    }
                    this._Piloti.Entity = value;
                    if (value != null)
                    {
                        this._Pilota = value.IdPilota;
                        value.StatistichePiloti = this;
                    }
                    else
                    {
                        this._Pilota = default(string);
                    }
                    this.SendPropertyChanged("Piloti");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DataraceContext.Team in the schema.
    /// </summary>
    [Table(Name = @"datarace.team")]
    public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _IdTeam;

        private string _Nome;

        private string _Paese;

        private string _Tipo;
        #pragma warning restore 0649

        private EntitySet<StagioniTeam> _StagioniTeam;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdTeamChanging(string value);
        partial void OnIdTeamChanged();
        partial void OnNomeChanging(string value);
        partial void OnNomeChanged();
        partial void OnPaeseChanging(string value);
        partial void OnPaeseChanged();
        partial void OnTipoChanging(string value);
        partial void OnTipoChanged();
        #endregion

        public Team()
        {
            this._StagioniTeam = new EntitySet<StagioniTeam>(new Action<StagioniTeam>(this.attach_StagioniTeam), new Action<StagioniTeam>(this.detach_StagioniTeam));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdTeam in the schema.
        /// </summary>
        [Column(Name = @"idTeam", Storage = "_IdTeam", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string IdTeam
        {
            get
            {
                return this._IdTeam;
            }
            set
            {
                if (this._IdTeam != value)
                {
                    this.OnIdTeamChanging(value);
                    this.SendPropertyChanging("IdTeam");
                    this._IdTeam = value;
                    this.SendPropertyChanged("IdTeam");
                    this.OnIdTeamChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nome in the schema.
        /// </summary>
        [Column(Name = @"nome", Storage = "_Nome", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nome
        {
            get
            {
                return this._Nome;
            }
            set
            {
                if (this._Nome != value)
                {
                    this.OnNomeChanging(value);
                    this.SendPropertyChanging("Nome");
                    this._Nome = value;
                    this.SendPropertyChanged("Nome");
                    this.OnNomeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Paese in the schema.
        /// </summary>
        [Column(Name = @"paese", Storage = "_Paese", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Paese
        {
            get
            {
                return this._Paese;
            }
            set
            {
                if (this._Paese != value)
                {
                    this.OnPaeseChanging(value);
                    this.SendPropertyChanging("Paese");
                    this._Paese = value;
                    this.SendPropertyChanged("Paese");
                    this.OnPaeseChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tipo in the schema.
        /// </summary>
        [Column(Name = @"tipo", Storage = "_Tipo", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Tipo
        {
            get
            {
                return this._Tipo;
            }
            set
            {
                if (this._Tipo != value)
                {
                    this.OnTipoChanging(value);
                    this.SendPropertyChanging("Tipo");
                    this._Tipo = value;
                    this.SendPropertyChanged("Tipo");
                    this.OnTipoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StagioniTeam in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Team_StagioniTeam", Storage="_StagioniTeam", ThisKey="IdTeam", OtherKey="Team", DeleteRule="NO ACTION")]
        public EntitySet<StagioniTeam> StagioniTeam
        {
            get
            {
                return this._StagioniTeam;
            }
            set
            {
                this._StagioniTeam.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_StagioniTeam(StagioniTeam entity)
        {
            this.SendPropertyChanging("StagioniTeam");
            entity.Team1 = this;
        }
    
        private void detach_StagioniTeam(StagioniTeam entity)
        {
            this.SendPropertyChanging("StagioniTeam");
            entity.Team1 = null;
        }
    }

    /// <summary>
    /// VIEW
    /// </summary>
    [Table(Name = @"datarace.edizione_piu_recente")]
    public partial class EdizionePiuRecente
    {
        #pragma warning disable 0649

        private string _GranPremio;

        private int _Anno;

        private int _NumeroEdizione;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnGranPremioChanging(string value);
        partial void OnGranPremioChanged();
        partial void OnAnnoChanging(int value);
        partial void OnAnnoChanged();
        partial void OnNumeroEdizioneChanging(int value);
        partial void OnNumeroEdizioneChanged();
        #endregion

        public EdizionePiuRecente()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for GranPremio in the schema.
        /// </summary>
        [Column(Name = @"granPremio", Storage = "_GranPremio", CanBeNull = false, DbType = "CHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string GranPremio
        {
            get
            {
                return this._GranPremio;
            }
            set
            {
                if (this._GranPremio != value)
                {
                    this._GranPremio = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Anno in the schema.
        /// </summary>
        [Column(Name = @"anno", Storage = "_Anno", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Anno
        {
            get
            {
                return this._Anno;
            }
            set
            {
                if (this._Anno != value)
                {
                    this._Anno = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NumeroEdizione in the schema.
        /// </summary>
        [Column(Name = @"numeroEdizione", Storage = "_NumeroEdizione", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int NumeroEdizione
        {
            get
            {
                return this._NumeroEdizione;
            }
            set
            {
                if (this._NumeroEdizione != value)
                {
                    this._NumeroEdizione = value;
                }
            }
        }
    }

    /// <summary>
    /// VIEW
    /// </summary>
    [Table(Name = @"datarace.risultati_circuito")]
    public partial class RisultatiCircuito
    {
        #pragma warning disable 0649

        private string _Pilota;

        private int _PosizioneCalendario;

        private int _Anno;

        private string _IdRisultato;

        private int _PosizioneArrivo;

        private string _IdPilota;

        private string _Nome;

        private string _Cognome;

        private string _GranPremio;

        private string _Circuito;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPilotaChanging(string value);
        partial void OnPilotaChanged();
        partial void OnPosizioneCalendarioChanging(int value);
        partial void OnPosizioneCalendarioChanged();
        partial void OnAnnoChanging(int value);
        partial void OnAnnoChanged();
        partial void OnIdRisultatoChanging(string value);
        partial void OnIdRisultatoChanged();
        partial void OnPosizioneArrivoChanging(int value);
        partial void OnPosizioneArrivoChanged();
        partial void OnIdPilotaChanging(string value);
        partial void OnIdPilotaChanged();
        partial void OnNomeChanging(string value);
        partial void OnNomeChanged();
        partial void OnCognomeChanging(string value);
        partial void OnCognomeChanged();
        partial void OnGranPremioChanging(string value);
        partial void OnGranPremioChanged();
        partial void OnCircuitoChanging(string value);
        partial void OnCircuitoChanged();
        #endregion

        public RisultatiCircuito()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Pilota in the schema.
        /// </summary>
        [Column(Name = @"pilota", Storage = "_Pilota", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Pilota
        {
            get
            {
                return this._Pilota;
            }
            set
            {
                if (this._Pilota != value)
                {
                    this._Pilota = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosizioneCalendario in the schema.
        /// </summary>
        [Column(Name = @"posizioneCalendario", Storage = "_PosizioneCalendario", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PosizioneCalendario
        {
            get
            {
                return this._PosizioneCalendario;
            }
            set
            {
                if (this._PosizioneCalendario != value)
                {
                    this._PosizioneCalendario = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Anno in the schema.
        /// </summary>
        [Column(Name = @"anno", Storage = "_Anno", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Anno
        {
            get
            {
                return this._Anno;
            }
            set
            {
                if (this._Anno != value)
                {
                    this._Anno = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdRisultato in the schema.
        /// </summary>
        [Column(Name = @"idRisultato", Storage = "_IdRisultato", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IdRisultato
        {
            get
            {
                return this._IdRisultato;
            }
            set
            {
                if (this._IdRisultato != value)
                {
                    this._IdRisultato = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PosizioneArrivo in the schema.
        /// </summary>
        [Column(Name = @"posizioneArrivo", Storage = "_PosizioneArrivo", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int PosizioneArrivo
        {
            get
            {
                return this._PosizioneArrivo;
            }
            set
            {
                if (this._PosizioneArrivo != value)
                {
                    this._PosizioneArrivo = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdPilota in the schema.
        /// </summary>
        [Column(Name = @"idPilota", Storage = "_IdPilota", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IdPilota
        {
            get
            {
                return this._IdPilota;
            }
            set
            {
                if (this._IdPilota != value)
                {
                    this._IdPilota = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Nome in the schema.
        /// </summary>
        [Column(Name = @"nome", Storage = "_Nome", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Nome
        {
            get
            {
                return this._Nome;
            }
            set
            {
                if (this._Nome != value)
                {
                    this._Nome = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cognome in the schema.
        /// </summary>
        [Column(Name = @"cognome", Storage = "_Cognome", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Cognome
        {
            get
            {
                return this._Cognome;
            }
            set
            {
                if (this._Cognome != value)
                {
                    this._Cognome = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GranPremio in the schema.
        /// </summary>
        [Column(Name = @"granPremio", Storage = "_GranPremio", CanBeNull = false, DbType = "CHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string GranPremio
        {
            get
            {
                return this._GranPremio;
            }
            set
            {
                if (this._GranPremio != value)
                {
                    this._GranPremio = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Circuito in the schema.
        /// </summary>
        [Column(Name = @"circuito", Storage = "_Circuito", CanBeNull = false, DbType = "CHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Circuito
        {
            get
            {
                return this._Circuito;
            }
            set
            {
                if (this._Circuito != value)
                {
                    this._Circuito = value;
                }
            }
        }
    }

    /// <summary>
    /// VIEW
    /// </summary>
    [Table(Name = @"datarace.stagione_corrente")]
    public partial class StagioneCorrente
    {
        #pragma warning disable 0649

        private int _Anno;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAnnoChanging(int value);
        partial void OnAnnoChanged();
        #endregion

        public StagioneCorrente()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Anno in the schema.
        /// </summary>
        [Column(Name = @"anno", Storage = "_Anno", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Anno
        {
            get
            {
                return this._Anno;
            }
            set
            {
                if (this._Anno != value)
                {
                    this._Anno = value;
                }
            }
        }
    }

}
